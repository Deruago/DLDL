#ifndef DLDL_FILETEMPLATE_IMPORTCPPTEMPLATE_h
#define DLDL_FILETEMPLATE_IMPORTCPPTEMPLATE_h

#include <string>
#include <variant>
#include <vector>

namespace DLDL::filetemplate
{
	/*!	\class ImportCPPTemplate
	 *
	 *	\brief Generates code for "ImportCPPTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class ImportCPPTemplate
	{
	public:
		enum class Type
		{
			Unknown,
			Scope,

			// User defined types
			add_import_file_import_rule_,
			add_import_file_object_import_rule_,
			add_import_file_target_,
			add_import_object_target_,
			add_import_specification_,
			add_import_syntactic_relation_,
			add_unknown_reference_,
			file_,
			implementation_import_file_import_rule_,
			implementation_import_file_object_import_rule_,
			implementation_import_file_target_,
			implementation_import_object_target_,
			implementation_import_specification_,
			implementation_import_syntactic_relation_,
			implementation_import_syntactic_relation_impl_,
			implementation_import_syntactic_relation_type_1_,
			implementation_import_syntactic_relation_type_2_,
			import_object_value_rule_name_,
			import_object_value_rule_name_impl_,
			import_specification_underlying_name_,
			import_style_type_celeste_,
			import_style_type_cpp_,
			import_style_type_custom_,
			import_style_type_impl_,
			import_style_type_python_,
			import_type_file_import_,
			import_type_impl_,
			import_type_module_import_,
			import_type_type_in_file_import_,
			import_type_type_in_module_import_,
			language_full_name_,
			language_full_name_slash_,
			language_full_name_underscore_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			name_import_file_import_rule_,
			name_import_file_import_rule_impl_,
			name_import_file_object_import_rule_,
			name_import_file_object_import_rule_impl_,
			name_import_file_target_,
			name_import_file_target_impl_,
			name_import_object_target_,
			name_import_object_target_impl_,
			name_import_specification_,
			name_import_specification_impl_,
			name_import_syntactic_relation_,
			name_import_syntactic_relation_impl_,
			name_secondary_import_syntactic_relation_impl_,
			next_syntactic_relation_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,
			terminal_name_,
			underlying_file_target_,
			underlying_object_target_,
			underlying_syntax_relation_,
			unknown_reference_,
			unknown_reference_implementation_,
			value_name_impl_,
			value_object_name_,

		};

		enum class ScopeType
		{
			Unknown,

			// Default
			Default_,
			Upper_,
			Lower_,

			Snake_,
			Slash_,
			BackSlash_,
			Colon_,
			DoubleColon_,

			Variable_Field_,
			Variable_Field_Separator_,
			Function_Field_,
			Function_Field_Separator_,

		};

		static constexpr const char*
		ConvertEnumToName(::DLDL::filetemplate::ImportCPPTemplate::Type enumerationValue)
		{
			switch (enumerationValue)
			{
			case ::DLDL::filetemplate::ImportCPPTemplate::Type::Unknown: {
				return "Unknown";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::Scope: {
				return "Scope";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_file_import_rule_: {
				return "add_import_file_import_rule";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				add_import_file_object_import_rule_: {
				return "add_import_file_object_import_rule";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_file_target_: {
				return "add_import_file_target";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_object_target_: {
				return "add_import_object_target";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_specification_: {
				return "add_import_specification";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_syntactic_relation_: {
				return "add_import_syntactic_relation";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::add_unknown_reference_: {
				return "add_unknown_reference";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::file_: {
				return "file";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				implementation_import_file_import_rule_: {
				return "implementation_import_file_import_rule";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				implementation_import_file_object_import_rule_: {
				return "implementation_import_file_object_import_rule";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				implementation_import_file_target_: {
				return "implementation_import_file_target";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				implementation_import_object_target_: {
				return "implementation_import_object_target";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				implementation_import_specification_: {
				return "implementation_import_specification";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				implementation_import_syntactic_relation_: {
				return "implementation_import_syntactic_relation";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				implementation_import_syntactic_relation_impl_: {
				return "implementation_import_syntactic_relation_impl";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				implementation_import_syntactic_relation_type_1_: {
				return "implementation_import_syntactic_relation_type_1";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				implementation_import_syntactic_relation_type_2_: {
				return "implementation_import_syntactic_relation_type_2";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::import_object_value_rule_name_: {
				return "import_object_value_rule_name";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				import_object_value_rule_name_impl_: {
				return "import_object_value_rule_name_impl";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				import_specification_underlying_name_: {
				return "import_specification_underlying_name";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_celeste_: {
				return "import_style_type_celeste";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_cpp_: {
				return "import_style_type_cpp";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_custom_: {
				return "import_style_type_custom";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_impl_: {
				return "import_style_type_impl";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_python_: {
				return "import_style_type_python";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::import_type_file_import_: {
				return "import_type_file_import";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::import_type_impl_: {
				return "import_type_impl";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::import_type_module_import_: {
				return "import_type_module_import";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::import_type_type_in_file_import_: {
				return "import_type_type_in_file_import";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				import_type_type_in_module_import_: {
				return "import_type_type_in_module_import";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::language_full_name_: {
				return "language_full_name";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::language_full_name_slash_: {
				return "language_full_name_slash";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::language_full_name_underscore_: {
				return "language_full_name_underscore";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::left_angle_bracket_: {
				return "left_angle_bracket";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::left_bracket_: {
				return "left_bracket";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::left_curly_bracket_: {
				return "left_curly_bracket";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_file_import_rule_: {
				return "name_import_file_import_rule";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				name_import_file_import_rule_impl_: {
				return "name_import_file_import_rule_impl";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				name_import_file_object_import_rule_: {
				return "name_import_file_object_import_rule";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				name_import_file_object_import_rule_impl_: {
				return "name_import_file_object_import_rule_impl";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_file_target_: {
				return "name_import_file_target";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_file_target_impl_: {
				return "name_import_file_target_impl";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_object_target_: {
				return "name_import_object_target";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_object_target_impl_: {
				return "name_import_object_target_impl";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_specification_: {
				return "name_import_specification";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_specification_impl_: {
				return "name_import_specification_impl";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_syntactic_relation_: {
				return "name_import_syntactic_relation";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				name_import_syntactic_relation_impl_: {
				return "name_import_syntactic_relation_impl";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::
				name_secondary_import_syntactic_relation_impl_: {
				return "name_secondary_import_syntactic_relation_impl";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::next_syntactic_relation_: {
				return "next_syntactic_relation";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::right_angle_bracket_: {
				return "right_angle_bracket";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::right_bracket_: {
				return "right_bracket";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::right_curly_bracket_: {
				return "right_curly_bracket";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::terminal_name_: {
				return "terminal_name";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::underlying_file_target_: {
				return "underlying_file_target";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::underlying_object_target_: {
				return "underlying_object_target";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::underlying_syntax_relation_: {
				return "underlying_syntax_relation";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::unknown_reference_: {
				return "unknown_reference";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::unknown_reference_implementation_: {
				return "unknown_reference_implementation";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::value_name_impl_: {
				return "value_name_impl";
			}

			case ::DLDL::filetemplate::ImportCPPTemplate::Type::value_object_name_: {
				return "value_object_name";
			}
			}

			return "";
		}

	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::DLDL::filetemplate::ImportCPPTemplate::Type type =
				::DLDL::filetemplate::ImportCPPTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			virtual std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({currentValueAsVariableBase, variable});

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}

		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::DLDL::filetemplate::ImportCPPTemplate::ScopeType scope_type =
				::DLDL::filetemplate::ImportCPPTemplate::ScopeType::Unknown;
			bool isReserved = false;

			VariableScope(::DLDL::filetemplate::ImportCPPTemplate::ScopeType scope_type_,
						  bool isReserved_ = false)
				: VariableBase(),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::Scope;
			}

			VariableScope(const char* text,
						  ::DLDL::filetemplate::ImportCPPTemplate::ScopeType scope_type_,
						  bool isReserved_ = false)
				: VariableBase(text),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::Scope;
			}

			VariableScope(std::vector<VariableBase*> variable,
						  ::DLDL::filetemplate::ImportCPPTemplate::ScopeType scope_type_,
						  bool isReserved_ = false)
				: VariableBase(variable),
				  scope_type(scope_type_),
				  isReserved(isReserved_)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::Scope;
			}
		};

		struct Variable_ReservedScope_Upper : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Upper(VariableBase* base_)
				: VariableScope(::DLDL::filetemplate::ImportCPPTemplate::ScopeType::Upper_, true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string upperVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};

		struct Variable_ReservedScope_Lower : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Lower(VariableBase* base_)
				: VariableScope(::DLDL::filetemplate::ImportCPPTemplate::ScopeType::Lower_, true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string lowerVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};

		struct Variable_ReservedScope_Snake : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Snake(VariableBase* base_)
				: VariableScope(::DLDL::filetemplate::ImportCPPTemplate::ScopeType::Snake_, true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string snakeVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						snakeVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						snakeVariant += '_';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!snakeVariant.empty() && lastWasNonAlpha)
				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};

		struct Variable_ReservedScope_Slash : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Slash(VariableBase* base_)
				: VariableScope(::DLDL::filetemplate::ImportCPPTemplate::ScopeType::Slash_, true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string slashVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						slashVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						slashVariant += '/';
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!slashVariant.empty() && lastWasNonAlpha)
				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};

		struct Variable_ReservedScope_DoubleColon : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_DoubleColon(VariableBase* base_)
				: VariableScope(::DLDL::filetemplate::ImportCPPTemplate::ScopeType::DoubleColon_,
								true),
				  base(base_)
			{
			}

			virtual std::string GetValue() override
			{
				std::string doubleColonVariant;
				std::string currentValue = base->GetValue();

				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						doubleColonVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}

						doubleColonVariant += "::";
						lastWasNonAlpha = true;
					}
				}

				// If it contains text
				// remove the tail
				if (!doubleColonVariant.empty() && lastWasNonAlpha)
				{
					doubleColonVariant.pop_back();
					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ = new VariableScope(
				::DLDL::filetemplate::ImportCPPTemplate::ScopeType::Default_, true);
			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);
			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);

			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);
			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);
			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);

			VariableBase* variable_field_ = new VariableScope(
				::DLDL::filetemplate::ImportCPPTemplate::ScopeType::Variable_Field_, true);
			VariableBase* variable_field_separator_ = new VariableScope(
				"\n", ::DLDL::filetemplate::ImportCPPTemplate::ScopeType::Variable_Field_Separator_,
				true);

			// Ctor
			VariableScopes() : VariableBase()
			{
			}

			VariableScopes(const char* text) : VariableBase(text)
			{
			}

			VariableScopes(const std::string& text) : VariableBase(text)
			{
			}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables)
			{
			}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				return upper_;
			}

			VariableBase* Lower()
			{
				return lower_;
			}

			VariableBase* Underscore()
			{
				return snake_;
			}

			VariableBase* Snake()
			{
				return snake_;
			}

			VariableBase* Slash()
			{
				return slash_;
			}

			VariableBase* DoubleColon()
			{
				return double_colon_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:
		struct Variable_add_import_file_import_rule_ : public VariableScopes
		{
			static constexpr auto name = "add_import_file_import_rule_";

			Variable_add_import_file_import_rule_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_file_import_rule_;
			}

			virtual ~Variable_add_import_file_import_rule_() override = default;

			Variable_add_import_file_import_rule_(ImportCPPTemplate* importcpptemplate_,
												  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_file_import_rule_;
			}

			Variable_add_import_file_import_rule_&
			operator=(const Variable_add_import_file_import_rule_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_add_import_file_object_import_rule_ : public VariableScopes
		{
			static constexpr auto name = "add_import_file_object_import_rule_";

			Variable_add_import_file_object_import_rule_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					add_import_file_object_import_rule_;
			}

			virtual ~Variable_add_import_file_object_import_rule_() override = default;

			Variable_add_import_file_object_import_rule_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					add_import_file_object_import_rule_;
			}

			Variable_add_import_file_object_import_rule_&
			operator=(const Variable_add_import_file_object_import_rule_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_add_import_file_target_ : public VariableScopes
		{
			static constexpr auto name = "add_import_file_target_";

			Variable_add_import_file_target_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_file_target_;
			}

			virtual ~Variable_add_import_file_target_() override = default;

			Variable_add_import_file_target_(ImportCPPTemplate* importcpptemplate_,
											 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_file_target_;
			}

			Variable_add_import_file_target_&
			operator=(const Variable_add_import_file_target_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_add_import_object_target_ : public VariableScopes
		{
			static constexpr auto name = "add_import_object_target_";

			Variable_add_import_object_target_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_object_target_;
			}

			virtual ~Variable_add_import_object_target_() override = default;

			Variable_add_import_object_target_(ImportCPPTemplate* importcpptemplate_,
											   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_object_target_;
			}

			Variable_add_import_object_target_&
			operator=(const Variable_add_import_object_target_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_add_import_specification_ : public VariableScopes
		{
			static constexpr auto name = "add_import_specification_";

			Variable_add_import_specification_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_specification_;
			}

			virtual ~Variable_add_import_specification_() override = default;

			Variable_add_import_specification_(ImportCPPTemplate* importcpptemplate_,
											   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_specification_;
			}

			Variable_add_import_specification_&
			operator=(const Variable_add_import_specification_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_add_import_syntactic_relation_ : public VariableScopes
		{
			static constexpr auto name = "add_import_syntactic_relation_";

			Variable_add_import_syntactic_relation_() : VariableScopes()
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_syntactic_relation_;
			}

			virtual ~Variable_add_import_syntactic_relation_() override = default;

			Variable_add_import_syntactic_relation_(ImportCPPTemplate* importcpptemplate_,
													const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::add_import_syntactic_relation_;
			}

			Variable_add_import_syntactic_relation_&
			operator=(const Variable_add_import_syntactic_relation_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_add_unknown_reference_ : public VariableScopes
		{
			static constexpr auto name = "add_unknown_reference_";

			Variable_add_unknown_reference_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::add_unknown_reference_;
			}

			virtual ~Variable_add_unknown_reference_() override = default;

			Variable_add_unknown_reference_(ImportCPPTemplate* importcpptemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::add_unknown_reference_;
			}

			Variable_add_unknown_reference_&
			operator=(const Variable_add_unknown_reference_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_file_ : public VariableScopes
		{
			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");

			Variable_file_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(ImportCPPTemplate* importcpptemplate_,
						   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::file_;
				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>(
					{GenerateVariable("#include \""),
					 GenerateVariable(importcpptemplate_->language_full_name_slash_->This()),
					 GenerateVariable("/Import"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include \""),
					 GenerateVariable(importcpptemplate_->language_full_name_slash_->This()),
					 GenerateVariable("/Value"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n#include \""),
					 GenerateVariable(importcpptemplate_->language_full_name_slash_->This()),
					 GenerateVariable("/Language"),
					 GenerateVariable("."),
					 GenerateVariable("h\"\n\n"),
					 GenerateVariable(importcpptemplate_->language_full_name_->This()),
					 GenerateVariable("::Import::Import("),
					 GenerateVariable(importcpptemplate_->language_full_name_->This()),
					 GenerateVariable("::Language* "
									  "language)\n\t\t\t:\t::deamer::language::generator::"
									  "definition::property::user::Import<\n\t\t\t\t\t"),
					 GenerateVariable(importcpptemplate_->language_full_name_->This()),
					 GenerateVariable("::Language>(language)\n"),
					 GenerateVariable("{"),
					 GenerateVariable("\n"),
					 GenerateVariable("}"),
					 GenerateVariable("\n\nvoid "),
					 GenerateVariable(importcpptemplate_->language_full_name_->This()),
					 GenerateVariable("::Import::GenerateObjects()\n"),
					 GenerateVariable("{"),
					 GenerateVariable("\n\t// Import Specification\n"),
					 GenerateVariable(importcpptemplate_->implementation_import_specification_
										  ->Variable_Field()),
					 GenerateVariable("\n\n\t// File Import Rules\n"),
					 GenerateVariable(importcpptemplate_->implementation_import_file_import_rule_
										  ->Variable_Field()),
					 GenerateVariable("\n\n\t// File Object Import Rules\n"),
					 GenerateVariable(
						 importcpptemplate_->implementation_import_file_object_import_rule_
							 ->Variable_Field()),
					 GenerateVariable("\n\n\t// Import Syntactic Relation\n"),
					 GenerateVariable(importcpptemplate_->implementation_import_syntactic_relation_
										  ->Variable_Field()),
					 GenerateVariable("\n\n\t// Import File Target\n"),
					 GenerateVariable(
						 importcpptemplate_->implementation_import_file_target_->Variable_Field()),
					 GenerateVariable("\n\n\t// Import Object Target\n"),
					 GenerateVariable(importcpptemplate_->implementation_import_object_target_
										  ->Variable_Field()),
					 GenerateVariable("\n\n\t// Unknown References\n"),
					 GenerateVariable(
						 importcpptemplate_->unknown_reference_implementation_->Variable_Field()),
					 GenerateVariable("\n\n\t// Import Specification\n"),
					 GenerateVariable(
						 importcpptemplate_->add_import_specification_->Variable_Field()),
					 GenerateVariable("\n\n\t// File Import Rules\n"),
					 GenerateVariable(
						 importcpptemplate_->add_import_file_import_rule_->Variable_Field()),
					 GenerateVariable("\n\n\t// File Object Import Rules\n"),
					 GenerateVariable(
						 importcpptemplate_->add_import_file_object_import_rule_->Variable_Field()),
					 GenerateVariable("\n\n\t// Import Syntactic Relation\n"),
					 GenerateVariable(
						 importcpptemplate_->add_import_syntactic_relation_->Variable_Field()),
					 GenerateVariable("\n\n\t// Import File Target\n"),
					 GenerateVariable(
						 importcpptemplate_->add_import_file_target_->Variable_Field()),
					 GenerateVariable("\n\n\t// Import Object Target\n"),
					 GenerateVariable(
						 importcpptemplate_->add_import_object_target_->Variable_Field()),
					 GenerateVariable("\n\n\t// Unknown References\n"),
					 GenerateVariable(importcpptemplate_->add_unknown_reference_->Variable_Field()),
					 GenerateVariable("\n"),
					 GenerateVariable("}")}));
				Content_->type = ::DLDL::filetemplate::ImportCPPTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) =
					VariableBase(std::vector<VariableBase*>({}));
				Class_postfix_->type = ::DLDL::filetemplate::ImportCPPTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("h")}));
				Extension_->type = ::DLDL::filetemplate::ImportCPPTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("ImportCPP")}));
				File_name_->type = ::DLDL::filetemplate::ImportCPPTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(
					std::vector<VariableBase*>({GenerateVariable("DLDL::filetemplate")}));
				Namespace_->type = ::DLDL::filetemplate::ImportCPPTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) =
					VariableBase(std::vector<VariableBase*>({GenerateVariable("C++")}));
				Target_language_->type = ::DLDL::filetemplate::ImportCPPTemplate::Type::Scope;
			}

			VariableBase* Content() const
			{
				return Content_;
			}

			VariableBase* Class_postfix() const
			{
				return Class_postfix_;
			}

			VariableBase* Extension() const
			{
				return Extension_;
			}

			VariableBase* File_name() const
			{
				return File_name_;
			}

			VariableBase* Namespace() const
			{
				return Namespace_;
			}

			VariableBase* Target_language() const
			{
				return Target_language_;
			}

			Variable_file_& operator=(const Variable_file_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;

				return *this;
			}
		};

		struct Variable_implementation_import_file_import_rule_ : public VariableScopes
		{
			static constexpr auto name = "implementation_import_file_import_rule_";

			Variable_implementation_import_file_import_rule_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_file_import_rule_;
			}

			virtual ~Variable_implementation_import_file_import_rule_() override = default;

			Variable_implementation_import_file_import_rule_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_file_import_rule_;
			}

			Variable_implementation_import_file_import_rule_&
			operator=(const Variable_implementation_import_file_import_rule_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_implementation_import_file_object_import_rule_ : public VariableScopes
		{
			static constexpr auto name = "implementation_import_file_object_import_rule_";

			Variable_implementation_import_file_object_import_rule_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_file_object_import_rule_;
			}

			virtual ~Variable_implementation_import_file_object_import_rule_() override = default;

			Variable_implementation_import_file_object_import_rule_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_file_object_import_rule_;
			}

			Variable_implementation_import_file_object_import_rule_&
			operator=(const Variable_implementation_import_file_object_import_rule_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_implementation_import_file_target_ : public VariableScopes
		{
			static constexpr auto name = "implementation_import_file_target_";

			Variable_implementation_import_file_target_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_file_target_;
			}

			virtual ~Variable_implementation_import_file_target_() override = default;

			Variable_implementation_import_file_target_(ImportCPPTemplate* importcpptemplate_,
														const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_file_target_;
			}

			Variable_implementation_import_file_target_&
			operator=(const Variable_implementation_import_file_target_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_implementation_import_object_target_ : public VariableScopes
		{
			static constexpr auto name = "implementation_import_object_target_";

			Variable_implementation_import_object_target_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_object_target_;
			}

			virtual ~Variable_implementation_import_object_target_() override = default;

			Variable_implementation_import_object_target_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_object_target_;
			}

			Variable_implementation_import_object_target_&
			operator=(const Variable_implementation_import_object_target_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_implementation_import_specification_ : public VariableScopes
		{
			static constexpr auto name = "implementation_import_specification_";

			Variable_implementation_import_specification_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_specification_;
			}

			virtual ~Variable_implementation_import_specification_() override = default;

			Variable_implementation_import_specification_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_specification_;
			}

			Variable_implementation_import_specification_&
			operator=(const Variable_implementation_import_specification_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_implementation_import_syntactic_relation_ : public VariableScopes
		{
			static constexpr auto name = "implementation_import_syntactic_relation_";

			Variable_implementation_import_syntactic_relation_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_syntactic_relation_;
			}

			virtual ~Variable_implementation_import_syntactic_relation_() override = default;

			Variable_implementation_import_syntactic_relation_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_syntactic_relation_;
			}

			Variable_implementation_import_syntactic_relation_&
			operator=(const Variable_implementation_import_syntactic_relation_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_implementation_import_syntactic_relation_impl_ : public VariableScopes
		{
			static constexpr auto name = "implementation_import_syntactic_relation_impl_";

			Variable_implementation_import_syntactic_relation_impl_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_syntactic_relation_impl_;
			}

			virtual ~Variable_implementation_import_syntactic_relation_impl_() override = default;

			Variable_implementation_import_syntactic_relation_impl_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_syntactic_relation_impl_;
			}

			Variable_implementation_import_syntactic_relation_impl_&
			operator=(const Variable_implementation_import_syntactic_relation_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_implementation_import_syntactic_relation_type_1_ : public VariableScopes
		{
			static constexpr auto name = "implementation_import_syntactic_relation_type_1_";

			Variable_implementation_import_syntactic_relation_type_1_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_syntactic_relation_type_1_;
			}

			virtual ~Variable_implementation_import_syntactic_relation_type_1_() override = default;

			Variable_implementation_import_syntactic_relation_type_1_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_syntactic_relation_type_1_;
			}

			Variable_implementation_import_syntactic_relation_type_1_&
			operator=(const Variable_implementation_import_syntactic_relation_type_1_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_implementation_import_syntactic_relation_type_2_ : public VariableScopes
		{
			static constexpr auto name = "implementation_import_syntactic_relation_type_2_";

			Variable_implementation_import_syntactic_relation_type_2_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_syntactic_relation_type_2_;
			}

			virtual ~Variable_implementation_import_syntactic_relation_type_2_() override = default;

			Variable_implementation_import_syntactic_relation_type_2_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					implementation_import_syntactic_relation_type_2_;
			}

			Variable_implementation_import_syntactic_relation_type_2_&
			operator=(const Variable_implementation_import_syntactic_relation_type_2_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_import_object_value_rule_name_ : public VariableScopes
		{
			static constexpr auto name = "import_object_value_rule_name_";

			Variable_import_object_value_rule_name_() : VariableScopes()
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::import_object_value_rule_name_;
			}

			virtual ~Variable_import_object_value_rule_name_() override = default;

			Variable_import_object_value_rule_name_(ImportCPPTemplate* importcpptemplate_,
													const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::import_object_value_rule_name_;
			}

			Variable_import_object_value_rule_name_&
			operator=(const Variable_import_object_value_rule_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_import_object_value_rule_name_impl_ : public VariableScopes
		{
			static constexpr auto name = "import_object_value_rule_name_impl_";

			Variable_import_object_value_rule_name_impl_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					import_object_value_rule_name_impl_;
			}

			virtual ~Variable_import_object_value_rule_name_impl_() override = default;

			Variable_import_object_value_rule_name_impl_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					import_object_value_rule_name_impl_;
			}

			Variable_import_object_value_rule_name_impl_&
			operator=(const Variable_import_object_value_rule_name_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_import_specification_underlying_name_ : public VariableScopes
		{
			static constexpr auto name = "import_specification_underlying_name_";

			Variable_import_specification_underlying_name_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					import_specification_underlying_name_;
			}

			virtual ~Variable_import_specification_underlying_name_() override = default;

			Variable_import_specification_underlying_name_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					import_specification_underlying_name_;
			}

			Variable_import_specification_underlying_name_&
			operator=(const Variable_import_specification_underlying_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_import_style_type_celeste_ : public VariableScopes
		{
			static constexpr auto name = "import_style_type_celeste_";

			Variable_import_style_type_celeste_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_celeste_;
			}

			virtual ~Variable_import_style_type_celeste_() override = default;

			Variable_import_style_type_celeste_(ImportCPPTemplate* importcpptemplate_,
												const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_celeste_;
			}

			Variable_import_style_type_celeste_&
			operator=(const Variable_import_style_type_celeste_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_import_style_type_cpp_ : public VariableScopes
		{
			static constexpr auto name = "import_style_type_cpp_";

			Variable_import_style_type_cpp_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_cpp_;
			}

			virtual ~Variable_import_style_type_cpp_() override = default;

			Variable_import_style_type_cpp_(ImportCPPTemplate* importcpptemplate_,
											const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_cpp_;
			}

			Variable_import_style_type_cpp_&
			operator=(const Variable_import_style_type_cpp_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_import_style_type_custom_ : public VariableScopes
		{
			static constexpr auto name = "import_style_type_custom_";

			Variable_import_style_type_custom_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_custom_;
			}

			virtual ~Variable_import_style_type_custom_() override = default;

			Variable_import_style_type_custom_(ImportCPPTemplate* importcpptemplate_,
											   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_custom_;
			}

			Variable_import_style_type_custom_&
			operator=(const Variable_import_style_type_custom_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_import_style_type_impl_ : public VariableScopes
		{
			static constexpr auto name = "import_style_type_impl_";

			Variable_import_style_type_impl_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_impl_;
			}

			virtual ~Variable_import_style_type_impl_() override = default;

			Variable_import_style_type_impl_(ImportCPPTemplate* importcpptemplate_,
											 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_impl_;
			}

			Variable_import_style_type_impl_&
			operator=(const Variable_import_style_type_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_import_style_type_python_ : public VariableScopes
		{
			static constexpr auto name = "import_style_type_python_";

			Variable_import_style_type_python_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_python_;
			}

			virtual ~Variable_import_style_type_python_() override = default;

			Variable_import_style_type_python_(ImportCPPTemplate* importcpptemplate_,
											   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_style_type_python_;
			}

			Variable_import_style_type_python_&
			operator=(const Variable_import_style_type_python_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_import_type_file_import_ : public VariableScopes
		{
			static constexpr auto name = "import_type_file_import_";

			Variable_import_type_file_import_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_type_file_import_;
			}

			virtual ~Variable_import_type_file_import_() override = default;

			Variable_import_type_file_import_(ImportCPPTemplate* importcpptemplate_,
											  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_type_file_import_;
			}

			Variable_import_type_file_import_&
			operator=(const Variable_import_type_file_import_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_import_type_impl_ : public VariableScopes
		{
			static constexpr auto name = "import_type_impl_";

			Variable_import_type_impl_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_type_impl_;
			}

			virtual ~Variable_import_type_impl_() override = default;

			Variable_import_type_impl_(ImportCPPTemplate* importcpptemplate_,
									   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_type_impl_;
			}

			Variable_import_type_impl_& operator=(const Variable_import_type_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_import_type_module_import_ : public VariableScopes
		{
			static constexpr auto name = "import_type_module_import_";

			Variable_import_type_module_import_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_type_module_import_;
			}

			virtual ~Variable_import_type_module_import_() override = default;

			Variable_import_type_module_import_(ImportCPPTemplate* importcpptemplate_,
												const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::import_type_module_import_;
			}

			Variable_import_type_module_import_&
			operator=(const Variable_import_type_module_import_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_import_type_type_in_file_import_ : public VariableScopes
		{
			static constexpr auto name = "import_type_type_in_file_import_";

			Variable_import_type_type_in_file_import_() : VariableScopes()
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::import_type_type_in_file_import_;
			}

			virtual ~Variable_import_type_type_in_file_import_() override = default;

			Variable_import_type_type_in_file_import_(ImportCPPTemplate* importcpptemplate_,
													  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::import_type_type_in_file_import_;
			}

			Variable_import_type_type_in_file_import_&
			operator=(const Variable_import_type_type_in_file_import_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_import_type_type_in_module_import_ : public VariableScopes
		{
			static constexpr auto name = "import_type_type_in_module_import_";

			Variable_import_type_type_in_module_import_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					import_type_type_in_module_import_;
			}

			virtual ~Variable_import_type_type_in_module_import_() override = default;

			Variable_import_type_type_in_module_import_(ImportCPPTemplate* importcpptemplate_,
														const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					import_type_type_in_module_import_;
			}

			Variable_import_type_type_in_module_import_&
			operator=(const Variable_import_type_type_in_module_import_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_full_name_ : public VariableScopes
		{
			static constexpr auto name = "language_full_name_";

			Variable_language_full_name_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::language_full_name_;
			}

			virtual ~Variable_language_full_name_() override = default;

			Variable_language_full_name_(ImportCPPTemplate* importcpptemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::language_full_name_;
			}

			Variable_language_full_name_& operator=(const Variable_language_full_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_full_name_slash_ : public VariableScopes
		{
			static constexpr auto name = "language_full_name_slash_";

			Variable_language_full_name_slash_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::language_full_name_slash_;
			}

			virtual ~Variable_language_full_name_slash_() override = default;

			Variable_language_full_name_slash_(ImportCPPTemplate* importcpptemplate_,
											   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::language_full_name_slash_;
			}

			Variable_language_full_name_slash_&
			operator=(const Variable_language_full_name_slash_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_language_full_name_underscore_ : public VariableScopes
		{
			static constexpr auto name = "language_full_name_underscore_";

			Variable_language_full_name_underscore_() : VariableScopes()
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::language_full_name_underscore_;
			}

			virtual ~Variable_language_full_name_underscore_() override = default;

			Variable_language_full_name_underscore_(ImportCPPTemplate* importcpptemplate_,
													const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::language_full_name_underscore_;
			}

			Variable_language_full_name_underscore_&
			operator=(const Variable_language_full_name_underscore_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_angle_bracket_";

			Variable_left_angle_bracket_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(ImportCPPTemplate* importcpptemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::left_angle_bracket_;
			}

			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_bracket_";

			Variable_left_bracket_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(ImportCPPTemplate* importcpptemplate_,
								   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::left_bracket_;
			}

			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_left_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "left_curly_bracket_";

			Variable_left_curly_bracket_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(ImportCPPTemplate* importcpptemplate_,
										 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::left_curly_bracket_;
			}

			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_name_import_file_import_rule_ : public VariableScopes
		{
			static constexpr auto name = "name_import_file_import_rule_";

			Variable_name_import_file_import_rule_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_file_import_rule_;
			}

			virtual ~Variable_name_import_file_import_rule_() override = default;

			Variable_name_import_file_import_rule_(ImportCPPTemplate* importcpptemplate_,
												   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_file_import_rule_;
			}

			Variable_name_import_file_import_rule_&
			operator=(const Variable_name_import_file_import_rule_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_name_import_file_import_rule_impl_ : public VariableScopes
		{
			static constexpr auto name = "name_import_file_import_rule_impl_";

			Variable_name_import_file_import_rule_impl_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					name_import_file_import_rule_impl_;
			}

			virtual ~Variable_name_import_file_import_rule_impl_() override = default;

			Variable_name_import_file_import_rule_impl_(ImportCPPTemplate* importcpptemplate_,
														const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					name_import_file_import_rule_impl_;
			}

			Variable_name_import_file_import_rule_impl_&
			operator=(const Variable_name_import_file_import_rule_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_name_import_file_object_import_rule_ : public VariableScopes
		{
			static constexpr auto name = "name_import_file_object_import_rule_";

			Variable_name_import_file_object_import_rule_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					name_import_file_object_import_rule_;
			}

			virtual ~Variable_name_import_file_object_import_rule_() override = default;

			Variable_name_import_file_object_import_rule_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					name_import_file_object_import_rule_;
			}

			Variable_name_import_file_object_import_rule_&
			operator=(const Variable_name_import_file_object_import_rule_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_name_import_file_object_import_rule_impl_ : public VariableScopes
		{
			static constexpr auto name = "name_import_file_object_import_rule_impl_";

			Variable_name_import_file_object_import_rule_impl_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					name_import_file_object_import_rule_impl_;
			}

			virtual ~Variable_name_import_file_object_import_rule_impl_() override = default;

			Variable_name_import_file_object_import_rule_impl_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					name_import_file_object_import_rule_impl_;
			}

			Variable_name_import_file_object_import_rule_impl_&
			operator=(const Variable_name_import_file_object_import_rule_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_name_import_file_target_ : public VariableScopes
		{
			static constexpr auto name = "name_import_file_target_";

			Variable_name_import_file_target_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_file_target_;
			}

			virtual ~Variable_name_import_file_target_() override = default;

			Variable_name_import_file_target_(ImportCPPTemplate* importcpptemplate_,
											  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_file_target_;
			}

			Variable_name_import_file_target_&
			operator=(const Variable_name_import_file_target_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_name_import_file_target_impl_ : public VariableScopes
		{
			static constexpr auto name = "name_import_file_target_impl_";

			Variable_name_import_file_target_impl_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_file_target_impl_;
			}

			virtual ~Variable_name_import_file_target_impl_() override = default;

			Variable_name_import_file_target_impl_(ImportCPPTemplate* importcpptemplate_,
												   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_file_target_impl_;
			}

			Variable_name_import_file_target_impl_&
			operator=(const Variable_name_import_file_target_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_name_import_object_target_ : public VariableScopes
		{
			static constexpr auto name = "name_import_object_target_";

			Variable_name_import_object_target_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_object_target_;
			}

			virtual ~Variable_name_import_object_target_() override = default;

			Variable_name_import_object_target_(ImportCPPTemplate* importcpptemplate_,
												const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_object_target_;
			}

			Variable_name_import_object_target_&
			operator=(const Variable_name_import_object_target_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_name_import_object_target_impl_ : public VariableScopes
		{
			static constexpr auto name = "name_import_object_target_impl_";

			Variable_name_import_object_target_impl_() : VariableScopes()
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_object_target_impl_;
			}

			virtual ~Variable_name_import_object_target_impl_() override = default;

			Variable_name_import_object_target_impl_(ImportCPPTemplate* importcpptemplate_,
													 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_object_target_impl_;
			}

			Variable_name_import_object_target_impl_&
			operator=(const Variable_name_import_object_target_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_name_import_specification_ : public VariableScopes
		{
			static constexpr auto name = "name_import_specification_";

			Variable_name_import_specification_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_specification_;
			}

			virtual ~Variable_name_import_specification_() override = default;

			Variable_name_import_specification_(ImportCPPTemplate* importcpptemplate_,
												const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_specification_;
			}

			Variable_name_import_specification_&
			operator=(const Variable_name_import_specification_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_name_import_specification_impl_ : public VariableScopes
		{
			static constexpr auto name = "name_import_specification_impl_";

			Variable_name_import_specification_impl_() : VariableScopes()
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_specification_impl_;
			}

			virtual ~Variable_name_import_specification_impl_() override = default;

			Variable_name_import_specification_impl_(ImportCPPTemplate* importcpptemplate_,
													 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_specification_impl_;
			}

			Variable_name_import_specification_impl_&
			operator=(const Variable_name_import_specification_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_name_import_syntactic_relation_ : public VariableScopes
		{
			static constexpr auto name = "name_import_syntactic_relation_";

			Variable_name_import_syntactic_relation_() : VariableScopes()
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_syntactic_relation_;
			}

			virtual ~Variable_name_import_syntactic_relation_() override = default;

			Variable_name_import_syntactic_relation_(ImportCPPTemplate* importcpptemplate_,
													 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type =
					::DLDL::filetemplate::ImportCPPTemplate::Type::name_import_syntactic_relation_;
			}

			Variable_name_import_syntactic_relation_&
			operator=(const Variable_name_import_syntactic_relation_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_name_import_syntactic_relation_impl_ : public VariableScopes
		{
			static constexpr auto name = "name_import_syntactic_relation_impl_";

			Variable_name_import_syntactic_relation_impl_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					name_import_syntactic_relation_impl_;
			}

			virtual ~Variable_name_import_syntactic_relation_impl_() override = default;

			Variable_name_import_syntactic_relation_impl_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					name_import_syntactic_relation_impl_;
			}

			Variable_name_import_syntactic_relation_impl_&
			operator=(const Variable_name_import_syntactic_relation_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_name_secondary_import_syntactic_relation_impl_ : public VariableScopes
		{
			static constexpr auto name = "name_secondary_import_syntactic_relation_impl_";

			Variable_name_secondary_import_syntactic_relation_impl_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					name_secondary_import_syntactic_relation_impl_;
			}

			virtual ~Variable_name_secondary_import_syntactic_relation_impl_() override = default;

			Variable_name_secondary_import_syntactic_relation_impl_(
				ImportCPPTemplate* importcpptemplate_, const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					name_secondary_import_syntactic_relation_impl_;
			}

			Variable_name_secondary_import_syntactic_relation_impl_&
			operator=(const Variable_name_secondary_import_syntactic_relation_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_next_syntactic_relation_ : public VariableScopes
		{
			static constexpr auto name = "next_syntactic_relation_";

			Variable_next_syntactic_relation_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::next_syntactic_relation_;
			}

			virtual ~Variable_next_syntactic_relation_() override = default;

			Variable_next_syntactic_relation_(ImportCPPTemplate* importcpptemplate_,
											  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::next_syntactic_relation_;
			}

			Variable_next_syntactic_relation_&
			operator=(const Variable_next_syntactic_relation_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_angle_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_angle_bracket_";

			Variable_right_angle_bracket_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(ImportCPPTemplate* importcpptemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::right_angle_bracket_;
			}

			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_bracket_";

			Variable_right_bracket_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(ImportCPPTemplate* importcpptemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::right_bracket_;
			}

			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_right_curly_bracket_ : public VariableScopes
		{
			static constexpr auto name = "right_curly_bracket_";

			Variable_right_curly_bracket_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(ImportCPPTemplate* importcpptemplate_,
										  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::right_curly_bracket_;
			}

			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_terminal_name_ : public VariableScopes
		{
			static constexpr auto name = "terminal_name_";

			Variable_terminal_name_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::terminal_name_;
			}

			virtual ~Variable_terminal_name_() override = default;

			Variable_terminal_name_(ImportCPPTemplate* importcpptemplate_,
									const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::terminal_name_;
			}

			Variable_terminal_name_& operator=(const Variable_terminal_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_underlying_file_target_ : public VariableScopes
		{
			static constexpr auto name = "underlying_file_target_";

			Variable_underlying_file_target_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::underlying_file_target_;
			}

			virtual ~Variable_underlying_file_target_() override = default;

			Variable_underlying_file_target_(ImportCPPTemplate* importcpptemplate_,
											 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::underlying_file_target_;
			}

			Variable_underlying_file_target_&
			operator=(const Variable_underlying_file_target_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_underlying_object_target_ : public VariableScopes
		{
			static constexpr auto name = "underlying_object_target_";

			Variable_underlying_object_target_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::underlying_object_target_;
			}

			virtual ~Variable_underlying_object_target_() override = default;

			Variable_underlying_object_target_(ImportCPPTemplate* importcpptemplate_,
											   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::underlying_object_target_;
			}

			Variable_underlying_object_target_&
			operator=(const Variable_underlying_object_target_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_underlying_syntax_relation_ : public VariableScopes
		{
			static constexpr auto name = "underlying_syntax_relation_";

			Variable_underlying_syntax_relation_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::underlying_syntax_relation_;
			}

			virtual ~Variable_underlying_syntax_relation_() override = default;

			Variable_underlying_syntax_relation_(ImportCPPTemplate* importcpptemplate_,
												 const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::underlying_syntax_relation_;
			}

			Variable_underlying_syntax_relation_&
			operator=(const Variable_underlying_syntax_relation_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_unknown_reference_ : public VariableScopes
		{
			static constexpr auto name = "unknown_reference_";

			Variable_unknown_reference_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::unknown_reference_;
			}

			virtual ~Variable_unknown_reference_() override = default;

			Variable_unknown_reference_(ImportCPPTemplate* importcpptemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::unknown_reference_;
			}

			Variable_unknown_reference_& operator=(const Variable_unknown_reference_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_unknown_reference_implementation_ : public VariableScopes
		{
			static constexpr auto name = "unknown_reference_implementation_";

			Variable_unknown_reference_implementation_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					unknown_reference_implementation_;
			}

			virtual ~Variable_unknown_reference_implementation_() override = default;

			Variable_unknown_reference_implementation_(ImportCPPTemplate* importcpptemplate_,
													   const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::
					unknown_reference_implementation_;
			}

			Variable_unknown_reference_implementation_&
			operator=(const Variable_unknown_reference_implementation_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_value_name_impl_ : public VariableScopes
		{
			static constexpr auto name = "value_name_impl_";

			Variable_value_name_impl_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::value_name_impl_;
			}

			virtual ~Variable_value_name_impl_() override = default;

			Variable_value_name_impl_(ImportCPPTemplate* importcpptemplate_,
									  const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::value_name_impl_;
			}

			Variable_value_name_impl_& operator=(const Variable_value_name_impl_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

		struct Variable_value_object_name_ : public VariableScopes
		{
			static constexpr auto name = "value_object_name_";

			Variable_value_object_name_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::value_object_name_;
			}

			virtual ~Variable_value_object_name_() override = default;

			Variable_value_object_name_(ImportCPPTemplate* importcpptemplate_,
										const std::vector<VariableBase*>& variables)
				: VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::ImportCPPTemplate::Type::value_object_name_;
			}

			Variable_value_object_name_& operator=(const Variable_value_object_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				return *this;
			}
		};

	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. ImportCPPTemplate.member = "auto-generated";
		Variable_add_import_file_import_rule_* add_import_file_import_rule_ =
			new Variable_add_import_file_import_rule_();
		Variable_add_import_file_object_import_rule_* add_import_file_object_import_rule_ =
			new Variable_add_import_file_object_import_rule_();
		Variable_add_import_file_target_* add_import_file_target_ =
			new Variable_add_import_file_target_();
		Variable_add_import_object_target_* add_import_object_target_ =
			new Variable_add_import_object_target_();
		Variable_add_import_specification_* add_import_specification_ =
			new Variable_add_import_specification_();
		Variable_add_import_syntactic_relation_* add_import_syntactic_relation_ =
			new Variable_add_import_syntactic_relation_();
		Variable_add_unknown_reference_* add_unknown_reference_ =
			new Variable_add_unknown_reference_();
		Variable_file_* file_ = new Variable_file_();
		Variable_implementation_import_file_import_rule_* implementation_import_file_import_rule_ =
			new Variable_implementation_import_file_import_rule_();
		Variable_implementation_import_file_object_import_rule_*
			implementation_import_file_object_import_rule_ =
				new Variable_implementation_import_file_object_import_rule_();
		Variable_implementation_import_file_target_* implementation_import_file_target_ =
			new Variable_implementation_import_file_target_();
		Variable_implementation_import_object_target_* implementation_import_object_target_ =
			new Variable_implementation_import_object_target_();
		Variable_implementation_import_specification_* implementation_import_specification_ =
			new Variable_implementation_import_specification_();
		Variable_implementation_import_syntactic_relation_*
			implementation_import_syntactic_relation_ =
				new Variable_implementation_import_syntactic_relation_();
		Variable_implementation_import_syntactic_relation_impl_*
			implementation_import_syntactic_relation_impl_ =
				new Variable_implementation_import_syntactic_relation_impl_();
		Variable_implementation_import_syntactic_relation_type_1_*
			implementation_import_syntactic_relation_type_1_ =
				new Variable_implementation_import_syntactic_relation_type_1_();
		Variable_implementation_import_syntactic_relation_type_2_*
			implementation_import_syntactic_relation_type_2_ =
				new Variable_implementation_import_syntactic_relation_type_2_();
		Variable_import_object_value_rule_name_* import_object_value_rule_name_ =
			new Variable_import_object_value_rule_name_();
		Variable_import_object_value_rule_name_impl_* import_object_value_rule_name_impl_ =
			new Variable_import_object_value_rule_name_impl_();
		Variable_import_specification_underlying_name_* import_specification_underlying_name_ =
			new Variable_import_specification_underlying_name_();
		Variable_import_style_type_celeste_* import_style_type_celeste_ =
			new Variable_import_style_type_celeste_();
		Variable_import_style_type_cpp_* import_style_type_cpp_ =
			new Variable_import_style_type_cpp_();
		Variable_import_style_type_custom_* import_style_type_custom_ =
			new Variable_import_style_type_custom_();
		Variable_import_style_type_impl_* import_style_type_impl_ =
			new Variable_import_style_type_impl_();
		Variable_import_style_type_python_* import_style_type_python_ =
			new Variable_import_style_type_python_();
		Variable_import_type_file_import_* import_type_file_import_ =
			new Variable_import_type_file_import_();
		Variable_import_type_impl_* import_type_impl_ = new Variable_import_type_impl_();
		Variable_import_type_module_import_* import_type_module_import_ =
			new Variable_import_type_module_import_();
		Variable_import_type_type_in_file_import_* import_type_type_in_file_import_ =
			new Variable_import_type_type_in_file_import_();
		Variable_import_type_type_in_module_import_* import_type_type_in_module_import_ =
			new Variable_import_type_type_in_module_import_();
		Variable_language_full_name_* language_full_name_ = new Variable_language_full_name_();
		Variable_language_full_name_slash_* language_full_name_slash_ =
			new Variable_language_full_name_slash_();
		Variable_language_full_name_underscore_* language_full_name_underscore_ =
			new Variable_language_full_name_underscore_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_name_import_file_import_rule_* name_import_file_import_rule_ =
			new Variable_name_import_file_import_rule_();
		Variable_name_import_file_import_rule_impl_* name_import_file_import_rule_impl_ =
			new Variable_name_import_file_import_rule_impl_();
		Variable_name_import_file_object_import_rule_* name_import_file_object_import_rule_ =
			new Variable_name_import_file_object_import_rule_();
		Variable_name_import_file_object_import_rule_impl_*
			name_import_file_object_import_rule_impl_ =
				new Variable_name_import_file_object_import_rule_impl_();
		Variable_name_import_file_target_* name_import_file_target_ =
			new Variable_name_import_file_target_();
		Variable_name_import_file_target_impl_* name_import_file_target_impl_ =
			new Variable_name_import_file_target_impl_();
		Variable_name_import_object_target_* name_import_object_target_ =
			new Variable_name_import_object_target_();
		Variable_name_import_object_target_impl_* name_import_object_target_impl_ =
			new Variable_name_import_object_target_impl_();
		Variable_name_import_specification_* name_import_specification_ =
			new Variable_name_import_specification_();
		Variable_name_import_specification_impl_* name_import_specification_impl_ =
			new Variable_name_import_specification_impl_();
		Variable_name_import_syntactic_relation_* name_import_syntactic_relation_ =
			new Variable_name_import_syntactic_relation_();
		Variable_name_import_syntactic_relation_impl_* name_import_syntactic_relation_impl_ =
			new Variable_name_import_syntactic_relation_impl_();
		Variable_name_secondary_import_syntactic_relation_impl_*
			name_secondary_import_syntactic_relation_impl_ =
				new Variable_name_secondary_import_syntactic_relation_impl_();
		Variable_next_syntactic_relation_* next_syntactic_relation_ =
			new Variable_next_syntactic_relation_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();
		Variable_terminal_name_* terminal_name_ = new Variable_terminal_name_();
		Variable_underlying_file_target_* underlying_file_target_ =
			new Variable_underlying_file_target_();
		Variable_underlying_object_target_* underlying_object_target_ =
			new Variable_underlying_object_target_();
		Variable_underlying_syntax_relation_* underlying_syntax_relation_ =
			new Variable_underlying_syntax_relation_();
		Variable_unknown_reference_* unknown_reference_ = new Variable_unknown_reference_();
		Variable_unknown_reference_implementation_* unknown_reference_implementation_ =
			new Variable_unknown_reference_implementation_();
		Variable_value_name_impl_* value_name_impl_ = new Variable_value_name_impl_();
		Variable_value_object_name_* value_object_name_ = new Variable_value_object_name_();

	public:
		ImportCPPTemplate()
		{
			*add_import_file_import_rule_ = Variable_add_import_file_import_rule_(
				this,
				std::vector<VariableBase*>({GenerateVariable("\tAddObject("),
											GenerateVariable(name_import_file_import_rule_->This()),
											GenerateVariable(");")}));
			*add_import_file_object_import_rule_ = Variable_add_import_file_object_import_rule_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\tAddObject("),
						   GenerateVariable(name_import_file_object_import_rule_->This()),
						   GenerateVariable(");")}));
			*add_import_file_target_ = Variable_add_import_file_target_(
				this,
				std::vector<VariableBase*>({GenerateVariable("\tAddObject("),
											GenerateVariable(name_import_file_target_->This()),
											GenerateVariable(");")}));
			*add_import_object_target_ = Variable_add_import_object_target_(
				this,
				std::vector<VariableBase*>({GenerateVariable("\tAddObject("),
											GenerateVariable(name_import_object_target_->This()),
											GenerateVariable(");")}));
			*add_import_specification_ = Variable_add_import_specification_(
				this,
				std::vector<VariableBase*>({GenerateVariable("\tAddObject("),
											GenerateVariable(name_import_specification_->This()),
											GenerateVariable(");")}));
			*add_import_syntactic_relation_ = Variable_add_import_syntactic_relation_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("\tAddObject("),
						   GenerateVariable(name_import_syntactic_relation_->This()),
						   GenerateVariable(");")}));
			*add_unknown_reference_ = Variable_add_unknown_reference_(
				this, std::vector<VariableBase*>({GenerateVariable("AddObject("),
												  GenerateVariable(unknown_reference_->This()),
												  GenerateVariable(");")}));
			*file_ = Variable_file_(this, std::vector<VariableBase*>({}));
			*implementation_import_file_import_rule_ =
				Variable_implementation_import_file_import_rule_(
					this, std::vector<VariableBase*>(
							  {GenerateVariable("\t"),
							   GenerateVariable(name_import_file_import_rule_->This()),
							   GenerateVariable("."),
							   GenerateVariable("Set(::deamer::language::type::definition::object::"
												"main::FileImport(\n\t\t"),
							   GenerateVariable(underlying_syntax_relation_->This()),
							   GenerateVariable("."), GenerateVariable("Pointer(),\n\t\t"),
							   GenerateVariable(underlying_file_target_->This()),
							   GenerateVariable("."), GenerateVariable("Pointer()\n\t));")}));
			*implementation_import_file_object_import_rule_ =
				Variable_implementation_import_file_object_import_rule_(
					this, std::vector<VariableBase*>(
							  {GenerateVariable("\t"),
							   GenerateVariable(name_import_file_object_import_rule_->This()),
							   GenerateVariable("."),
							   GenerateVariable("Set(::deamer::language::type::definition::object::"
												"main::FileObjectImport(\n\t\t"),
							   GenerateVariable(underlying_syntax_relation_->This()),
							   GenerateVariable("."), GenerateVariable("Pointer(),\n\t\t"),
							   GenerateVariable(underlying_file_target_->This()),
							   GenerateVariable("."), GenerateVariable("Pointer(),\n\t\t"),
							   GenerateVariable(underlying_object_target_->This()),
							   GenerateVariable("."), GenerateVariable("Pointer()\n\t));")}));
			*implementation_import_file_target_ = Variable_implementation_import_file_target_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\t"), GenerateVariable(name_import_file_target_->This()),
					 GenerateVariable("."),
					 GenerateVariable("Set(::deamer::language::type::definition::object::main::"
									  "ImportFileTarget(\n\tLanguage->"),
					 GenerateVariable(import_object_value_rule_name_impl_->This()),
					 GenerateVariable("."), GenerateVariable("Pointer()\n\t));")}));
			*implementation_import_object_target_ = Variable_implementation_import_object_target_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\t"), GenerateVariable(name_import_object_target_->This()),
					 GenerateVariable("."),
					 GenerateVariable("Set(::deamer::language::type::definition::object::main::"
									  "ObjectTarget(\n\tLanguage->"),
					 GenerateVariable(import_object_value_rule_name_impl_->This()),
					 GenerateVariable("."), GenerateVariable("Pointer()\n\t));")}));
			*implementation_import_specification_ = Variable_implementation_import_specification_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("\t"), GenerateVariable(name_import_specification_->This()),
					 GenerateVariable("."),
					 GenerateVariable("Set(::deamer::language::type::definition::object::main::"
									  "ImportSpecification(\n\t"),
					 GenerateVariable(import_specification_underlying_name_->This()),
					 GenerateVariable("."),
					 GenerateVariable("Pointer(),\n\t::deamer::language::type::definition::object::"
									  "main::ImportType::"),
					 GenerateVariable(import_type_impl_->This()),
					 GenerateVariable(",\n\t::deamer::language::type::definition::object::main::"
									  "ImportStyleType::"),
					 GenerateVariable(import_style_type_impl_->This()),
					 GenerateVariable("\n\t));")}));
			*implementation_import_syntactic_relation_ =
				Variable_implementation_import_syntactic_relation_(
					this, std::vector<VariableBase*>({GenerateVariable(
							  implementation_import_syntactic_relation_impl_->This())}));
			*implementation_import_syntactic_relation_impl_ =
				Variable_implementation_import_syntactic_relation_impl_(
					this, std::vector<VariableBase*>({}));
			*implementation_import_syntactic_relation_type_1_ =
				Variable_implementation_import_syntactic_relation_type_1_(
					this, std::vector<VariableBase*>(
							  {GenerateVariable("\t"),
							   GenerateVariable(name_import_syntactic_relation_->This()),
							   GenerateVariable("."),
							   GenerateVariable("Set(::deamer::language::type::definition::object::"
												"main::ImportSyntacticRelation(\n\tLanguage->"),
							   GenerateVariable(terminal_name_->This()), GenerateVariable("."),
							   GenerateVariable("Pointer(),\n\t"),
							   GenerateVariable(next_syntactic_relation_->This()),
							   GenerateVariable("."), GenerateVariable("Pointer()\n\t));")}));
			*implementation_import_syntactic_relation_type_2_ =
				Variable_implementation_import_syntactic_relation_type_2_(
					this, std::vector<VariableBase*>(
							  {GenerateVariable("\t"),
							   GenerateVariable(name_import_syntactic_relation_->This()),
							   GenerateVariable("."),
							   GenerateVariable("Set(::deamer::language::type::definition::object::"
												"main::ImportSyntacticRelation(\n\tLanguage->"),
							   GenerateVariable(terminal_name_->This()), GenerateVariable("."),
							   GenerateVariable("Pointer(),\n\tnullptr\n\t));")}));
			*import_object_value_rule_name_ =
				Variable_import_object_value_rule_name_(this, std::vector<VariableBase*>({}));
			*import_object_value_rule_name_impl_ = Variable_import_object_value_rule_name_impl_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("value_object__"),
						   GenerateVariable(import_object_value_rule_name_->This())}));
			*import_specification_underlying_name_ = Variable_import_specification_underlying_name_(
				this, std::vector<VariableBase*>({}));
			*import_style_type_celeste_ = Variable_import_style_type_celeste_(
				this, std::vector<VariableBase*>({GenerateVariable("Celeste")}));
			*import_style_type_cpp_ = Variable_import_style_type_cpp_(
				this, std::vector<VariableBase*>({GenerateVariable("Cpp")}));
			*import_style_type_custom_ = Variable_import_style_type_custom_(
				this, std::vector<VariableBase*>({GenerateVariable("Custom")}));
			*import_style_type_impl_ = Variable_import_style_type_impl_(
				this,
				std::vector<VariableBase*>({GenerateVariable(import_style_type_celeste_->This())}));
			*import_style_type_python_ = Variable_import_style_type_python_(
				this, std::vector<VariableBase*>({GenerateVariable("Python")}));
			*import_type_file_import_ = Variable_import_type_file_import_(
				this, std::vector<VariableBase*>({GenerateVariable("FileImport")}));
			*import_type_impl_ = Variable_import_type_impl_(this, std::vector<VariableBase*>({}));
			*import_type_module_import_ = Variable_import_type_module_import_(
				this, std::vector<VariableBase*>({GenerateVariable("ModuleImport")}));
			*import_type_type_in_file_import_ = Variable_import_type_type_in_file_import_(
				this, std::vector<VariableBase*>({GenerateVariable("TypeInFileImport")}));
			*import_type_type_in_module_import_ = Variable_import_type_type_in_module_import_(
				this, std::vector<VariableBase*>({GenerateVariable("TypeInModuleImport")}));
			*language_full_name_ =
				Variable_language_full_name_(this, std::vector<VariableBase*>({}));
			*language_full_name_slash_ =
				Variable_language_full_name_slash_(this, std::vector<VariableBase*>({}));
			*language_full_name_underscore_ =
				Variable_language_full_name_underscore_(this, std::vector<VariableBase*>({}));
			*left_angle_bracket_ = Variable_left_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("<")}));
			*left_bracket_ =
				Variable_left_bracket_(this, std::vector<VariableBase*>({GenerateVariable("{")}));
			*left_curly_bracket_ = Variable_left_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable("(")}));
			*name_import_file_import_rule_ = Variable_name_import_file_import_rule_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("import_file_import_rule__"),
						   GenerateVariable(name_import_file_import_rule_impl_->This())}));
			*name_import_file_import_rule_impl_ =
				Variable_name_import_file_import_rule_impl_(this, std::vector<VariableBase*>({}));
			*name_import_file_object_import_rule_ = Variable_name_import_file_object_import_rule_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("import_file_object_import_rule__"),
						   GenerateVariable(name_import_file_object_import_rule_impl_->This())}));
			*name_import_file_object_import_rule_impl_ =
				Variable_name_import_file_object_import_rule_impl_(this,
																   std::vector<VariableBase*>({}));
			*name_import_file_target_ = Variable_name_import_file_target_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("import_file_target__"),
						   GenerateVariable(name_import_file_target_impl_->This())}));
			*name_import_file_target_impl_ =
				Variable_name_import_file_target_impl_(this, std::vector<VariableBase*>({}));
			*name_import_object_target_ = Variable_name_import_object_target_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("import_object_target__"),
						   GenerateVariable(name_import_object_target_impl_->This())}));
			*name_import_object_target_impl_ =
				Variable_name_import_object_target_impl_(this, std::vector<VariableBase*>({}));
			*name_import_specification_ = Variable_name_import_specification_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("import_specification__"),
						   GenerateVariable(name_import_specification_impl_->This())}));
			*name_import_specification_impl_ =
				Variable_name_import_specification_impl_(this, std::vector<VariableBase*>({}));
			*name_import_syntactic_relation_ = Variable_name_import_syntactic_relation_(
				this, std::vector<VariableBase*>(
						  {GenerateVariable("import_syntactic_relation__"),
						   GenerateVariable(name_import_syntactic_relation_impl_->This())}));
			*name_import_syntactic_relation_impl_ =
				Variable_name_import_syntactic_relation_impl_(this, std::vector<VariableBase*>({}));
			*name_secondary_import_syntactic_relation_impl_ =
				Variable_name_secondary_import_syntactic_relation_impl_(
					this, std::vector<VariableBase*>({}));
			*next_syntactic_relation_ = Variable_next_syntactic_relation_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable("import_syntactic_relation__"),
					 GenerateVariable(name_secondary_import_syntactic_relation_impl_->This())}));
			*right_angle_bracket_ = Variable_right_angle_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(">")}));
			*right_bracket_ =
				Variable_right_bracket_(this, std::vector<VariableBase*>({GenerateVariable("}")}));
			*right_curly_bracket_ = Variable_right_curly_bracket_(
				this, std::vector<VariableBase*>({GenerateVariable(")")}));
			*terminal_name_ = Variable_terminal_name_(this, std::vector<VariableBase*>({}));
			*underlying_file_target_ =
				Variable_underlying_file_target_(this, std::vector<VariableBase*>({}));
			*underlying_object_target_ =
				Variable_underlying_object_target_(this, std::vector<VariableBase*>({}));
			*underlying_syntax_relation_ =
				Variable_underlying_syntax_relation_(this, std::vector<VariableBase*>({}));
			*unknown_reference_ = Variable_unknown_reference_(this, std::vector<VariableBase*>({}));
			*unknown_reference_implementation_ = Variable_unknown_reference_implementation_(
				this,
				std::vector<VariableBase*>(
					{GenerateVariable(unknown_reference_->This()), GenerateVariable("."),
					 GenerateVariable("Set(::deamer::language::type::definition::object::special::"
									  "Uninitialized<::deamer::language::type::definition::object::"
									  "main::NonTerminal>(\"NonTerminal\", \""),
					 GenerateVariable(unknown_reference_->This()),
					 GenerateVariable(
						 "\", \"Unknown reference to (most likely) a NonTerminal!\"));")}));
			*value_name_impl_ = Variable_value_name_impl_(
				this, std::vector<VariableBase*>({GenerateVariable("value_object__"),
												  GenerateVariable(value_object_name_->This())}));
			*value_object_name_ = Variable_value_object_name_(this, std::vector<VariableBase*>({}));

			variables_.emplace_back(add_import_file_import_rule_);
			variables_.emplace_back(add_import_file_object_import_rule_);
			variables_.emplace_back(add_import_file_target_);
			variables_.emplace_back(add_import_object_target_);
			variables_.emplace_back(add_import_specification_);
			variables_.emplace_back(add_import_syntactic_relation_);
			variables_.emplace_back(add_unknown_reference_);
			variables_.emplace_back(file_);
			variables_.emplace_back(implementation_import_file_import_rule_);
			variables_.emplace_back(implementation_import_file_object_import_rule_);
			variables_.emplace_back(implementation_import_file_target_);
			variables_.emplace_back(implementation_import_object_target_);
			variables_.emplace_back(implementation_import_specification_);
			variables_.emplace_back(implementation_import_syntactic_relation_);
			variables_.emplace_back(implementation_import_syntactic_relation_impl_);
			variables_.emplace_back(implementation_import_syntactic_relation_type_1_);
			variables_.emplace_back(implementation_import_syntactic_relation_type_2_);
			variables_.emplace_back(import_object_value_rule_name_);
			variables_.emplace_back(import_object_value_rule_name_impl_);
			variables_.emplace_back(import_specification_underlying_name_);
			variables_.emplace_back(import_style_type_celeste_);
			variables_.emplace_back(import_style_type_cpp_);
			variables_.emplace_back(import_style_type_custom_);
			variables_.emplace_back(import_style_type_impl_);
			variables_.emplace_back(import_style_type_python_);
			variables_.emplace_back(import_type_file_import_);
			variables_.emplace_back(import_type_impl_);
			variables_.emplace_back(import_type_module_import_);
			variables_.emplace_back(import_type_type_in_file_import_);
			variables_.emplace_back(import_type_type_in_module_import_);
			variables_.emplace_back(language_full_name_);
			variables_.emplace_back(language_full_name_slash_);
			variables_.emplace_back(language_full_name_underscore_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(name_import_file_import_rule_);
			variables_.emplace_back(name_import_file_import_rule_impl_);
			variables_.emplace_back(name_import_file_object_import_rule_);
			variables_.emplace_back(name_import_file_object_import_rule_impl_);
			variables_.emplace_back(name_import_file_target_);
			variables_.emplace_back(name_import_file_target_impl_);
			variables_.emplace_back(name_import_object_target_);
			variables_.emplace_back(name_import_object_target_impl_);
			variables_.emplace_back(name_import_specification_);
			variables_.emplace_back(name_import_specification_impl_);
			variables_.emplace_back(name_import_syntactic_relation_);
			variables_.emplace_back(name_import_syntactic_relation_impl_);
			variables_.emplace_back(name_secondary_import_syntactic_relation_impl_);
			variables_.emplace_back(next_syntactic_relation_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
			variables_.emplace_back(terminal_name_);
			variables_.emplace_back(underlying_file_target_);
			variables_.emplace_back(underlying_object_target_);
			variables_.emplace_back(underlying_syntax_relation_);
			variables_.emplace_back(unknown_reference_);
			variables_.emplace_back(unknown_reference_implementation_);
			variables_.emplace_back(value_name_impl_);
			variables_.emplace_back(value_object_name_);
		}

		virtual ~ImportCPPTemplate()
		{
			for (auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
	};
}

#endif // DLDL_FILETEMPLATE_IMPORTCPPTEMPLATE_h

#ifndef DLDL_FILETEMPLATE_CONSOLEPYTEMPLATE_h
#define DLDL_FILETEMPLATE_CONSOLEPYTEMPLATE_h

#include <variant>
#include <vector>
#include <string>

namespace DLDL::filetemplate
{

	/*!	\class ConsolePyTemplate
	 *
	 *	\brief Generates code for "ConsolePyTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class ConsolePyTemplate
	{
	public:
		enum class Type
{
Unknown,
Scope,

// User defined types
file_,
left_angle_bracket_,
left_bracket_,
left_curly_bracket_,
right_angle_bracket_,
right_bracket_,
right_curly_bracket_,


};


		enum class ScopeType
{
Unknown,

// Default
Default_,
Upper_,
Lower_,

Snake_,
Slash_,
BackSlash_,
Colon_,
DoubleColon_,

Variable_Field_,
Variable_Field_Separator_,
Function_Field_,
Function_Field_Separator_,


};


		static constexpr const char* ConvertEnumToName(::DLDL::filetemplate::ConsolePyTemplate::Type enumerationValue)
{
	switch(enumerationValue)
	{
	case ::DLDL::filetemplate::ConsolePyTemplate::Type::file_:
{
	return "file";
}

case ::DLDL::filetemplate::ConsolePyTemplate::Type::left_angle_bracket_:
{
	return "left_angle_bracket";
}

case ::DLDL::filetemplate::ConsolePyTemplate::Type::left_bracket_:
{
	return "left_bracket";
}

case ::DLDL::filetemplate::ConsolePyTemplate::Type::left_curly_bracket_:
{
	return "left_curly_bracket";
}

case ::DLDL::filetemplate::ConsolePyTemplate::Type::right_angle_bracket_:
{
	return "right_angle_bracket";
}

case ::DLDL::filetemplate::ConsolePyTemplate::Type::right_bracket_:
{
	return "right_bracket";
}

case ::DLDL::filetemplate::ConsolePyTemplate::Type::right_curly_bracket_:
{
	return "right_curly_bracket";
}


	}

	return "";
}


		
	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::DLDL::filetemplate::ConsolePyTemplate::Type type = ::DLDL::filetemplate::ConsolePyTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			virtual std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({ currentValueAsVariableBase, variable });

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}

		
		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::DLDL::filetemplate::ConsolePyTemplate::ScopeType scope_type = ::DLDL::filetemplate::ConsolePyTemplate::ScopeType::Unknown;
			bool isReserved = false;

			VariableScope(::DLDL::filetemplate::ConsolePyTemplate::ScopeType scope_type_, bool isReserved_ = false) : VariableBase(), scope_type(scope_type_), isReserved(isReserved_)
			{
				type = ::DLDL::filetemplate::ConsolePyTemplate::Type::Scope;
			}

			VariableScope(const char* text, ::DLDL::filetemplate::ConsolePyTemplate::ScopeType scope_type_, bool isReserved_ = false) : VariableBase(text), scope_type(scope_type_), isReserved(isReserved_)
			{
				type = ::DLDL::filetemplate::ConsolePyTemplate::Type::Scope;
			}

			VariableScope(std::vector<VariableBase*> variable, ::DLDL::filetemplate::ConsolePyTemplate::ScopeType scope_type_, bool isReserved_ = false) : VariableBase(variable), scope_type(scope_type_), isReserved(isReserved_)
			{
				type = ::DLDL::filetemplate::ConsolePyTemplate::Type::Scope;
			}
		};
		
		struct Variable_ReservedScope_Upper : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Upper(VariableBase* base_)
			: VariableScope(::DLDL::filetemplate::ConsolePyTemplate::ScopeType::Upper_, true),
			  base(base_)
			{
			}
			
			virtual std::string GetValue() override
			{
				std::string upperVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				return upperVariant;
			}
		};
		
		struct Variable_ReservedScope_Lower : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Lower(VariableBase* base_)
			: VariableScope(::DLDL::filetemplate::ConsolePyTemplate::ScopeType::Lower_, true),
			  base(base_)
			{
			}
			
			virtual std::string GetValue() override
			{
				std::string lowerVariant;
				std::string currentValue = base->GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				return lowerVariant;
			}
		};
		
		struct Variable_ReservedScope_Snake : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Snake(VariableBase* base_)
			: VariableScope(::DLDL::filetemplate::ConsolePyTemplate::ScopeType::Snake_, true),
			  base(base_)
			{
			}
			
			virtual std::string GetValue() override
			{
				std::string snakeVariant;
				std::string currentValue = base->GetValue();
				
				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						snakeVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}
						
						snakeVariant += '_';
						lastWasNonAlpha = true;
					}
				}
				
				// If it contains text
				// remove the tail
				if (!snakeVariant.empty() && lastWasNonAlpha)
				{
					snakeVariant.pop_back();
				}

				return snakeVariant;
			}
		};
		
		struct Variable_ReservedScope_Slash : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_Slash(VariableBase* base_)
			: VariableScope(::DLDL::filetemplate::ConsolePyTemplate::ScopeType::Slash_, true),
			  base(base_)
			{
			}
			
			virtual std::string GetValue() override
			{
				std::string slashVariant;
				std::string currentValue = base->GetValue();
				
				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						slashVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}
						
						slashVariant += '/';
						lastWasNonAlpha = true;
					}
				}
				
				// If it contains text
				// remove the tail
				if (!slashVariant.empty() && lastWasNonAlpha)
				{
					slashVariant.pop_back();
				}

				return slashVariant;
			}
		};
		
		struct Variable_ReservedScope_DoubleColon : public VariableScope
		{
			VariableBase* base;
			Variable_ReservedScope_DoubleColon(VariableBase* base_)
			: VariableScope(::DLDL::filetemplate::ConsolePyTemplate::ScopeType::DoubleColon_, true),
			  base(base_)
			{
			}
			
			virtual std::string GetValue() override
			{
				std::string doubleColonVariant;
				std::string currentValue = base->GetValue();
				
				bool lastWasNonAlpha = true;
				for (const auto character : currentValue)
				{
					if (std::isalpha(character))
					{
						doubleColonVariant += character;
						lastWasNonAlpha = false;
					}
					else
					{
						if (lastWasNonAlpha)
						{
							continue;
						}
						
						doubleColonVariant += "::";
						lastWasNonAlpha = true;
					}
				}
				
				// If it contains text
				// remove the tail
				if (!doubleColonVariant.empty() && lastWasNonAlpha)
				{
					doubleColonVariant.pop_back();
					doubleColonVariant.pop_back();
				}

				return doubleColonVariant;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ = new VariableScope(::DLDL::filetemplate::ConsolePyTemplate::ScopeType::Default_, true);
			VariableBase* upper_ = new Variable_ReservedScope_Upper(this);
			VariableBase* lower_ = new Variable_ReservedScope_Lower(this);
			
			VariableBase* snake_ = new Variable_ReservedScope_Snake(this);
			VariableBase* slash_ = new Variable_ReservedScope_Slash(this);
			VariableBase* double_colon_ = new Variable_ReservedScope_DoubleColon(this);
			
			VariableBase* variable_field_ = new VariableScope(::DLDL::filetemplate::ConsolePyTemplate::ScopeType::Variable_Field_, true);
			VariableBase* variable_field_separator_ = new VariableScope("\n", ::DLDL::filetemplate::ConsolePyTemplate::ScopeType::Variable_Field_Separator_, true);

			// Ctor
			VariableScopes() : VariableBase() {}

			VariableScopes(const char* text) : VariableBase(text) {}

			VariableScopes(const std::string& text) : VariableBase(text) {}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables) {}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				return upper_;
			}

			VariableBase* Lower()
			{
				return lower_;
			}

			VariableBase* Underscore()
			{
				return snake_;
			}

			VariableBase* Snake()
			{
				return snake_;
			}

			VariableBase* Slash()
			{
				return slash_;
			}

			VariableBase* DoubleColon()
			{
				return double_colon_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:
		
struct Variable_file_ : public VariableScopes
{

static constexpr auto name = "file_";

VariableBase* Content_ = GenerateVariable("");
VariableBase* Class_postfix_ = GenerateVariable("");
VariableBase* Extension_ = GenerateVariable("");
VariableBase* File_name_ = GenerateVariable("");
VariableBase* Namespace_ = GenerateVariable("");
VariableBase* Target_language_ = GenerateVariable("");


Variable_file_() : VariableScopes()
{
	type = ::DLDL::filetemplate::ConsolePyTemplate::Type::file_;
}

virtual ~Variable_file_() override = default;

Variable_file_(ConsolePyTemplate* consolepytemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
{
type = ::DLDL::filetemplate::ConsolePyTemplate::Type::file_;
*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>({ GenerateVariable("import os\nimport sys\nimport shutil\nimport subprocess\n\n# This Python Script utilizes the Python standard library to offer\n# A Cross Platform OS support for console commands"), GenerateVariable("."), GenerateVariable("\n#\n# Deamer CC construct the argument input for this python script\n# And Python executes the correct arguments"), GenerateVariable("."), GenerateVariable("\n#\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 3\n# of the License, or (at your option) any later version"), GenerateVariable("."), GenerateVariable("\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE"), GenerateVariable("."), GenerateVariable("  See the\n# GNU General Public License for more details"), GenerateVariable("."), GenerateVariable("\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software Foundation,\n# Inc"), GenerateVariable("."), GenerateVariable(", 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA"), GenerateVariable("."), GenerateVariable("\n#\n# For more information go to:\n# https://github"), GenerateVariable("."), GenerateVariable("com/Deruago/theDeamerProject\n#\n# If you find some crucial issue or bug please report it"), GenerateVariable("."), GenerateVariable(" By following the above link"), GenerateVariable("."), GenerateVariable("\n#\n\ndangerous_script = False\nour_os = \"\"\ntarget_os = \"\"\npython_console_version = \"1"), GenerateVariable("."), GenerateVariable("0"), GenerateVariable("."), GenerateVariable("0\"\nuser_name = \"\"\ndebug_mode = False\n\ndef execute_setting(arg_os: str, arg_header: str, arg_content: str):\n\tglobal dangerous_script\n\tglobal our_os\n\tglobal target_os\n\tglobal user_name\n\tglobal debug_mode\n\n\tif arg_header == \"DANGEROUS\":\n\t\t# Dangerous script should not continue if some error occures\n\t\tif arg_content == \"TRUE\":\n\t\t\tdangerous_script = True\n\t\telse:\n\t\t\tdangerous_script = False\n\tif arg_header == \"OUR_OS\":\n\t\t# Specifies the OS the python script is executed on\n\t\t# Required when target specific commands are executed\n\t\tour_os = arg_content\n\tif arg_header == \"THEIR_OR\":\n\t\t# Specifies the OS the python script should target\n\t\t# Required when target specific commands are executed\n\t\tour_os = arg_content\n\tif arg_header == \"USER_NAME\":\n\t\t# Specifies the name of the user or application which initiated this script\n\t\tuser_name = arg_content\n\tif arg_header == \"DEBUG_MODE\":\n\t\t# Enable or Disable Debug Mode\n\t\tif arg_content == \"TRUE\":\n\t\t\tdebug_mode = True\n\t\telse:\n\t\t\tdebug_mode = False\n\ndef execute_windows_arguments(arg_os: str, arg_header: str, arg_content: str):\n\tglobal dangerous_script\n\tglobal our_os\n\tglobal target_os\n\tglobal user_name\n\tglobal python_console_version\n\tglobal debug_mode\n\n\tif our_os == \"linux\":\n\t\t# No conversion possible\n\t\tpass\n\tif our_os == \"windows\":\n\t\t# Standard windows cmd call\n\t\tos"), GenerateVariable("."), GenerateVariable("system(f'"), GenerateVariable("{"), GenerateVariable("arg_content"), GenerateVariable("}"), GenerateVariable("')\n\t\tpass\n\tif our_os == \"mac\":\n\t\t# No conversion possible\n\t\tpass\n\tpass\n\ndef execute_linux_argument(arg_os: str, arg_header: str, arg_content: str):\n\tglobal dangerous_script\n\tglobal our_os\n\tglobal target_os\n\tglobal user_name\n\tglobal python_console_version\n\tglobal debug_mode\n\n\tif our_os == \"linux\":\n\t\t# Standard linux console call\n\t\tos"), GenerateVariable("."), GenerateVariable("system(f'("), GenerateVariable("{"), GenerateVariable("arg_content"), GenerateVariable("}"), GenerateVariable(")')\n\t\tpass\n\tif our_os == \"windows\":\n\t\t# Try to use WSL\n\t\tos"), GenerateVariable("."), GenerateVariable("system(f'bash -c \"("), GenerateVariable("{"), GenerateVariable("arg_content"), GenerateVariable("}"), GenerateVariable(")')\n\t\tpass\n\tif our_os == \"mac\":\n\t\t# No conversion possible\n\t\tpass\n\tpass\n\ndef execute_mac_argument(arg_os: str, arg_header: str, arg_content: str):\n\tglobal dangerous_script\n\tglobal our_os\n\tglobal target_os\n\tglobal user_name\n\tglobal python_console_version\n\tglobal debug_mode\n\n\tif our_os == \"linux\":\n\t\t# No conversion possible\n\t\tpass\n\tif our_os == \"windows\":\n\t\t# No conversion possible\n\t\tpass\n\tif our_os == \"mac\":\n\t\t# Standard mac console call\n\t\tos"), GenerateVariable("."), GenerateVariable("system(f'("), GenerateVariable("{"), GenerateVariable("arg_content"), GenerateVariable("}"), GenerateVariable(")')\n\t\tpass\n\tpass\n\ndef find_executable(lhsPath: str, file: str):\n\tfor root, dirs, files in os"), GenerateVariable("."), GenerateVariable("walk(lhsPath):\n\t\tif file in files:\n\t\t\treturn os"), GenerateVariable("."), GenerateVariable("path"), GenerateVariable("."), GenerateVariable("join(root, file)\n\traise Exception('Could not find file, this script is maybe dangerous')\n\ndef execute_python_argument(arg_os: str, arg_header: str, arg_content: str):\n\tglobal dangerous_script\n\tglobal our_os\n\tglobal target_os\n\tglobal user_name\n\tglobal python_console_version\n\tglobal debug_mode\n\n\tif debug_mode:\n\t\tprint(f'"), GenerateVariable("{"), GenerateVariable("arg_os"), GenerateVariable("}"), GenerateVariable(" --- "), GenerateVariable("{"), GenerateVariable("arg_header"), GenerateVariable("}"), GenerateVariable(" --- "), GenerateVariable("{"), GenerateVariable("arg_content"), GenerateVariable("}"), GenerateVariable("')\n\tif arg_header == \"MOVEFILE\":\n\t\t# This will move the file to the given path\n\t\t_, lhs_path, __, rhs_path, ___ = arg_content"), GenerateVariable("."), GenerateVariable("split('\"')\n\t\tshutil"), GenerateVariable("."), GenerateVariable("move(lhs_path, rhs_path)\n\t\treturn\n\tif arg_header == \"CD\":\n\t\t# This will change the directory to the given path\n\t\t_, lhs_path, __ = arg_content"), GenerateVariable("."), GenerateVariable("split('\"')\n\t\tos"), GenerateVariable("."), GenerateVariable("chdir(lhs_path)\n\t\treturn\n\tif arg_header == \"REMFILE\":\n\t\t# This will remove the file at the given path\n\t\t_, lhs_path, __ = arg_content"), GenerateVariable("."), GenerateVariable("split('\"')\n\t\tos"), GenerateVariable("."), GenerateVariable("remove(lhs_path)\n\t\treturn\n\tif arg_header == \"REMDIR\":\n\t\t# This will remove the directory at the given path\n\t\t_, lhs_path, __ = arg_content"), GenerateVariable("."), GenerateVariable("split('\"')\n\t\tshutil"), GenerateVariable("."), GenerateVariable("rmtree(lhs_path)\n\t\treturn\n\tif arg_header == \"CREATEDIR\":\n\t\t# This will create the directory at the given path\n\t\t_, lhs_path, __ = arg_content"), GenerateVariable("."), GenerateVariable("split('\"')\n\t\tos"), GenerateVariable("."), GenerateVariable("mkdir(lhs_path)\n\t\treturn\n\tif arg_header == \"FINDANDEXEC\":\n\t\t# This will find and executable and execute it\n\t\t# This command will only run executables without other args"), GenerateVariable("."), GenerateVariable("\n\t\t_, lhs_path, __ = arg_content"), GenerateVariable("."), GenerateVariable("split('\"')\n\t\texecutable = find_executable('"), GenerateVariable("."), GenerateVariable("/', lhs_path)\n\t\tsubprocess"), GenerateVariable("."), GenerateVariable("check_call([executable])\n\t\treturn\n\tif arg_header == \"COPYFILE\":\n\t\t# This will copy the file to the given path\n\t\t_, lhs_path, __, rhs_path, ___ = arg_content"), GenerateVariable("."), GenerateVariable("split('\"')\n\t\tshutil"), GenerateVariable("."), GenerateVariable("copy(lhs_path, rhs_path)\n\t\treturn\n\tif arg_header == \"COMMAND\":\n\t\t# It is assumed the command is cross platform executable\n\t\t_, lhs_path, __= arg_content"), GenerateVariable("."), GenerateVariable("split('\"')\n\t\tos"), GenerateVariable("."), GenerateVariable("system(lhs_path)\n\t\treturn\n\tif arg_header == \"ECHO\":\n\t\t# This will echo the given argument\n\t\t_, lhs_path, __= arg_content"), GenerateVariable("."), GenerateVariable("split('\"')\n\t\tprint(lhs_path)\n\t\treturn\n\tif arg_header == \"VERSION\":\n\t\t# This will print the python script version\n\t\tprint(python_console_version)\n\t\treturn\n\tprint(f\"Unknown Argument Header: "), GenerateVariable("{"), GenerateVariable("arg_header"), GenerateVariable("}"), GenerateVariable("\")\n\ndef execute_argument(arg: str):\n\tglobal dangerous_script\n\tglobal our_os\n\tglobal target_os\n\tglobal user_name\n\tglobal python_console_version\n\tglobal debug_mode\n\n\t# argument_os is the first word\n\t#  - Defines the target OS"), GenerateVariable("."), GenerateVariable("\n\t#  - This variable is also used to specify if some setting must be initialized\n\t# argument_header is the second word\n\t#  - Defines what type of command is executed"), GenerateVariable("."), GenerateVariable("\n\t# argument_content the arguments for the command\n\targument_os, argument_header, argument_content = arg"), GenerateVariable("."), GenerateVariable("split(\" \", 2)\n\t\n\t# Setup 1 setting\n\tif argument_os == \"SETTING\":\n\t\texecute_setting(argument_os, argument_header, argument_content)\n\t\treturn\n\tif argument_os == \"windows\":\n\t\texecute_windows_argument(argument_os, argument_header, argument_content)\n\t\treturn\n\tif argument_os == \"linux\":\n\t\texecute_linux_argument(argument_os, argument_header, argument_content)\n\t\treturn\n\tif argument_os == \"mac\":\n\t\texecute_mac_argument(argument_os, argument_header, argument_content)\n\t\treturn\n\t\n\ttry:\n\t\texecute_python_argument(argument_os, argument_header, argument_content)\n\texcept:\n\t\t# print(f\"Command throwed exception"), GenerateVariable("."), GenerateVariable(" This python script might become dangerous\")\n\t\tif dangerous_script:\n\t\t\tprint(\"As the script is dangerous this script will not continue further!\")\n\t\t\tsys"), GenerateVariable("."), GenerateVariable("exit()\n\t\treturn\n\ndef main():\n\tfirst = True\n\tfor argument in sys"), GenerateVariable("."), GenerateVariable("argv:\n\t\tif first:\n\t\t\tfirst = False\n\t\t\tcontinue\n\n\t\texecute_argument(argument)\n\nif __name__ == \"__main__\":\n\tmain()\n") }));
Content_->type = ::DLDL::filetemplate::ConsolePyTemplate::Type::Scope;

*static_cast<VariableBase*>(Class_postfix_) = VariableBase(std::vector<VariableBase*>({  }));
Class_postfix_->type = ::DLDL::filetemplate::ConsolePyTemplate::Type::Scope;

*static_cast<VariableBase*>(Extension_) = VariableBase(std::vector<VariableBase*>({ GenerateVariable("h") }));
Extension_->type = ::DLDL::filetemplate::ConsolePyTemplate::Type::Scope;

*static_cast<VariableBase*>(File_name_) = VariableBase(std::vector<VariableBase*>({ GenerateVariable("ConsolePy") }));
File_name_->type = ::DLDL::filetemplate::ConsolePyTemplate::Type::Scope;

*static_cast<VariableBase*>(Namespace_) = VariableBase(std::vector<VariableBase*>({ GenerateVariable("DLDL::filetemplate") }));
Namespace_->type = ::DLDL::filetemplate::ConsolePyTemplate::Type::Scope;

*static_cast<VariableBase*>(Target_language_) = VariableBase(std::vector<VariableBase*>({ GenerateVariable("C++") }));
Target_language_->type = ::DLDL::filetemplate::ConsolePyTemplate::Type::Scope;


}


VariableBase* Content() const
{
	return Content_;
}

VariableBase* Class_postfix() const
{
	return Class_postfix_;
}

VariableBase* Extension() const
{
	return Extension_;
}

VariableBase* File_name() const
{
	return File_name_;
}

VariableBase* Namespace() const
{
	return Namespace_;
}

VariableBase* Target_language() const
{
	return Target_language_;
}


Variable_file_& operator=(const Variable_file_& variable)
{
	if (&variable == this)
	{
		return *this;
	}

	value = variable.value;
	isString = variable.isString;

	*Content_ = *variable.Content_;
*Class_postfix_ = *variable.Class_postfix_;
*Extension_ = *variable.Extension_;
*File_name_ = *variable.File_name_;
*Namespace_ = *variable.Namespace_;
*Target_language_ = *variable.Target_language_;


	return *this;
}

};

struct Variable_left_angle_bracket_ : public VariableScopes
{

static constexpr auto name = "left_angle_bracket_";



Variable_left_angle_bracket_() : VariableScopes()
{
	type = ::DLDL::filetemplate::ConsolePyTemplate::Type::left_angle_bracket_;
}

virtual ~Variable_left_angle_bracket_() override = default;

Variable_left_angle_bracket_(ConsolePyTemplate* consolepytemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
{
type = ::DLDL::filetemplate::ConsolePyTemplate::Type::left_angle_bracket_;

}



Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
{
	if (&variable == this)
	{
		return *this;
	}

	value = variable.value;
	isString = variable.isString;

	

	return *this;
}

};

struct Variable_left_bracket_ : public VariableScopes
{

static constexpr auto name = "left_bracket_";



Variable_left_bracket_() : VariableScopes()
{
	type = ::DLDL::filetemplate::ConsolePyTemplate::Type::left_bracket_;
}

virtual ~Variable_left_bracket_() override = default;

Variable_left_bracket_(ConsolePyTemplate* consolepytemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
{
type = ::DLDL::filetemplate::ConsolePyTemplate::Type::left_bracket_;

}



Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
{
	if (&variable == this)
	{
		return *this;
	}

	value = variable.value;
	isString = variable.isString;

	

	return *this;
}

};

struct Variable_left_curly_bracket_ : public VariableScopes
{

static constexpr auto name = "left_curly_bracket_";



Variable_left_curly_bracket_() : VariableScopes()
{
	type = ::DLDL::filetemplate::ConsolePyTemplate::Type::left_curly_bracket_;
}

virtual ~Variable_left_curly_bracket_() override = default;

Variable_left_curly_bracket_(ConsolePyTemplate* consolepytemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
{
type = ::DLDL::filetemplate::ConsolePyTemplate::Type::left_curly_bracket_;

}



Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
{
	if (&variable == this)
	{
		return *this;
	}

	value = variable.value;
	isString = variable.isString;

	

	return *this;
}

};

struct Variable_right_angle_bracket_ : public VariableScopes
{

static constexpr auto name = "right_angle_bracket_";



Variable_right_angle_bracket_() : VariableScopes()
{
	type = ::DLDL::filetemplate::ConsolePyTemplate::Type::right_angle_bracket_;
}

virtual ~Variable_right_angle_bracket_() override = default;

Variable_right_angle_bracket_(ConsolePyTemplate* consolepytemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
{
type = ::DLDL::filetemplate::ConsolePyTemplate::Type::right_angle_bracket_;

}



Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
{
	if (&variable == this)
	{
		return *this;
	}

	value = variable.value;
	isString = variable.isString;

	

	return *this;
}

};

struct Variable_right_bracket_ : public VariableScopes
{

static constexpr auto name = "right_bracket_";



Variable_right_bracket_() : VariableScopes()
{
	type = ::DLDL::filetemplate::ConsolePyTemplate::Type::right_bracket_;
}

virtual ~Variable_right_bracket_() override = default;

Variable_right_bracket_(ConsolePyTemplate* consolepytemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
{
type = ::DLDL::filetemplate::ConsolePyTemplate::Type::right_bracket_;

}



Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
{
	if (&variable == this)
	{
		return *this;
	}

	value = variable.value;
	isString = variable.isString;

	

	return *this;
}

};

struct Variable_right_curly_bracket_ : public VariableScopes
{

static constexpr auto name = "right_curly_bracket_";



Variable_right_curly_bracket_() : VariableScopes()
{
	type = ::DLDL::filetemplate::ConsolePyTemplate::Type::right_curly_bracket_;
}

virtual ~Variable_right_curly_bracket_() override = default;

Variable_right_curly_bracket_(ConsolePyTemplate* consolepytemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
{
type = ::DLDL::filetemplate::ConsolePyTemplate::Type::right_curly_bracket_;

}



Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
{
	if (&variable == this)
	{
		return *this;
	}

	value = variable.value;
	isString = variable.isString;

	

	return *this;
}

};


	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. ConsolePyTemplate.member = "auto-generated";
		Variable_file_* file_ = new Variable_file_();
Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();


	public:
		ConsolePyTemplate()
		{
			*file_ = Variable_file_(this, std::vector<VariableBase*>({  }));
*left_angle_bracket_ = Variable_left_angle_bracket_(this, std::vector<VariableBase*>({ GenerateVariable("<") }));
*left_bracket_ = Variable_left_bracket_(this, std::vector<VariableBase*>({ GenerateVariable("{") }));
*left_curly_bracket_ = Variable_left_curly_bracket_(this, std::vector<VariableBase*>({ GenerateVariable("(") }));
*right_angle_bracket_ = Variable_right_angle_bracket_(this, std::vector<VariableBase*>({ GenerateVariable(">") }));
*right_bracket_ = Variable_right_bracket_(this, std::vector<VariableBase*>({ GenerateVariable("}") }));
*right_curly_bracket_ = Variable_right_curly_bracket_(this, std::vector<VariableBase*>({ GenerateVariable(")") }));


			variables_.emplace_back(file_);
variables_.emplace_back(left_angle_bracket_);
variables_.emplace_back(left_bracket_);
variables_.emplace_back(left_curly_bracket_);
variables_.emplace_back(right_angle_bracket_);
variables_.emplace_back(right_bracket_);
variables_.emplace_back(right_curly_bracket_);

		}

		virtual ~ConsolePyTemplate()
		{
			for(auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
	};
}

#endif // DLDL_FILETEMPLATE_CONSOLEPYTEMPLATE_h

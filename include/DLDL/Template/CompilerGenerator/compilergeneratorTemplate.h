#ifndef DST_COMPILERGENERATORTEMPLATE_h
#define DST_COMPILERGENERATORTEMPLATE_h

#include <variant>
#include <vector>
#include <string>

namespace DLDL::filetemplate
{

	/*!	\class compilergeneratorTemplate
	 *
	 *	\brief Generates code for "compilergeneratorTemplate"
	 *
	 *	\details This is generated by DST.
	 *	For more information visit: https://github.com/Deruago/DeamerStringTemplate
	 */
	class compilergeneratorTemplate
	{
	public:
		enum class Type
		{
			Unknown,
			Scope,

			// User defined types
			add_children_compilergenerators_,
			add_language_outputs_,
			child_,
			child_class_,
			children_compilergenerator_bases_,
			children_compilergenerator_bases_ctor_,
			children_compilergenerator_include_,
			file_,
			header_guard_,
			language_full_name_,
			language_full_name_slash_,
			language_full_name_underscore_,
			language_output_initialization_,
			left_angle_bracket_,
			left_bracket_,
			left_curly_bracket_,
			right_angle_bracket_,
			right_bracket_,
			right_curly_bracket_,
			tool_,
			tool_include_path_,
			tool_includes_,
			tool_namespace_,


		};


		enum class ScopeType
		{
			Unknown,

			// Default
			Default_,
			Upper_,
			Lower_,
			Variable_Field_,
			Variable_Field_Separator_,
			Function_Field_,
			Function_Field_Separator_,


		};


		static constexpr const char* ConvertEnumToName(::DLDL::filetemplate::compilergeneratorTemplate::Type enumerationValue)
		{
			switch (enumerationValue)
			{
			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::add_children_compilergenerators_:
			{
				return "add_children_compilergenerators";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::add_language_outputs_:
			{
				return "add_language_outputs";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::child_:
			{
				return "child";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::child_class_:
			{
				return "child_class";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::children_compilergenerator_bases_:
			{
				return "children_compilergenerator_bases";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::children_compilergenerator_bases_ctor_:
			{
				return "children_compilergenerator_bases_ctor";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::children_compilergenerator_include_:
			{
				return "children_compilergenerator_include";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::file_:
			{
				return "file";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::header_guard_:
			{
				return "header_guard";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::language_full_name_:
			{
				return "language_full_name";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::language_full_name_slash_:
			{
				return "language_full_name_slash";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::language_full_name_underscore_:
			{
				return "language_full_name_underscore";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::language_output_initialization_:
			{
				return "language_output_initialization";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::left_angle_bracket_:
			{
				return "left_angle_bracket";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::left_bracket_:
			{
				return "left_bracket";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::left_curly_bracket_:
			{
				return "left_curly_bracket";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::right_angle_bracket_:
			{
				return "right_angle_bracket";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::right_bracket_:
			{
				return "right_bracket";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::right_curly_bracket_:
			{
				return "right_curly_bracket";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::tool_:
			{
				return "tool";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::tool_include_path_:
			{
				return "tool_include_path";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::tool_includes_:
			{
				return "tool_includes";
			}

			case ::DLDL::filetemplate::compilergeneratorTemplate::Type::tool_namespace_:
			{
				return "tool_namespace";
			}


			}

			return "";
		}



	public:
		struct VariableBase
		{
			// The value is either a string
			// or a vector of variables.
			std::variant<std::string, std::vector<VariableBase*>> value;
			bool isString = true;

			::DLDL::filetemplate::compilergeneratorTemplate::Type type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::Unknown;

			VariableBase() : VariableBase(std::vector<VariableBase*>())
			{
			}

			virtual ~VariableBase() = default;

			VariableBase(const char* text)
			{
				isString = true;
				value = text;
			}

			VariableBase(const std::string& text)
			{
				isString = true;
				value = text;
			}

			VariableBase(std::vector<VariableBase*> variables)
			{
				isString = false;
				value = variables;
			}

			VariableBase* This()
			{
				return this;
			}

			std::string GetValue()
			{
				if (isString)
				{
					return std::get<std::string>(value);
				}
				else
				{
					std::string output;
					auto& variables = std::get<std::vector<VariableBase*>>(value);
					for (auto* variable : variables)
					{
						output += variable->GetValue();
					}
					return output;
				}
			}

			std::string GetName()
			{
				return ConvertEnumToName(type);
			}

			VariableBase& operator=(const std::string& variable)
			{
				return Set(variable);
			}

			VariableBase& operator=(VariableBase* variable)
			{
				return Set(variable);
			}

			VariableBase& operator+=(VariableBase* variable)
			{
				return Add(variable);
			}

			VariableBase& operator+=(const std::string& variable)
			{
				return Add(variable);
			}

			VariableBase& Set(const std::string& variable)
			{
				value = variable;
				isString = true;

				return *this;
			}

			VariableBase& Set(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				value = variable->value;
				isString = variable->isString;

				return *this;
			}

			VariableBase& Add(const std::string& variable)
			{
				if (isString)
				{
					auto& text = std::get<std::string>(value);
					text += variable;
					value = text;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(new VariableBase(variable));
					value = vector;
				}

				return *this;
			}

			VariableBase& Add(VariableBase* variable)
			{
				if (variable == this)
				{
					return *this;
				}

				if (isString)
				{
					// convert current -> variablebase
					// then create a vector.
					auto& currentValue = std::get<std::string>(value);
					auto* currentValueAsVariableBase = new VariableBase(currentValue);
					value = std::vector<VariableBase*>({ currentValueAsVariableBase, variable });

					isString = false;
				}
				else
				{
					auto& vector = std::get<std::vector<VariableBase*>>(value);
					vector.push_back(variable);
					value = vector;
				}

				return *this;
			}

			void Clear()
			{
				if (isString)
				{
					value = "";
				}
				else
				{
					value = std::vector<VariableBase*>();
				}
			}

			void* operator new(size_t size)
			{
				void* newVariable = ::operator new(size);
				variables_to_delete.emplace_back(static_cast<VariableBase*>(newVariable));

				return newVariable;
			}
		};

		static VariableBase* GenerateVariable(VariableBase* variable)
		{
			return variable;
		}


		static VariableBase* GenerateVariable(const std::string& variable)
		{
			return new VariableBase(variable);
		}

		struct VariableScope : public VariableBase
		{
			::DLDL::filetemplate::compilergeneratorTemplate::ScopeType scope_type = ::DLDL::filetemplate::compilergeneratorTemplate::ScopeType::Unknown;
			bool isReserved = false;

			VariableScope(::DLDL::filetemplate::compilergeneratorTemplate::ScopeType scope_type_, bool isReserved_ = false) : VariableBase(), scope_type(scope_type_), isReserved(isReserved_)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::Scope;
			}

			VariableScope(const char* text, ::DLDL::filetemplate::compilergeneratorTemplate::ScopeType scope_type_, bool isReserved_ = false) : VariableBase(text), scope_type(scope_type_), isReserved(isReserved_)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::Scope;
			}

			VariableScope(std::vector<VariableBase*> variable, ::DLDL::filetemplate::compilergeneratorTemplate::ScopeType scope_type_, bool isReserved_ = false) : VariableBase(variable), scope_type(scope_type_), isReserved(isReserved_)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::Scope;
			}
		};

		struct VariableScopes : public VariableBase
		{
			// Default scopes
			VariableBase* default_ = new VariableScope(::DLDL::filetemplate::compilergeneratorTemplate::ScopeType::Default_, true);
			VariableBase* upper_ = new VariableScope(::DLDL::filetemplate::compilergeneratorTemplate::ScopeType::Upper_, true);
			VariableBase* lower_ = new VariableScope(::DLDL::filetemplate::compilergeneratorTemplate::ScopeType::Lower_, true);
			VariableBase* variable_field_ = new VariableScope(::DLDL::filetemplate::compilergeneratorTemplate::ScopeType::Variable_Field_, true);
			VariableBase* variable_field_separator_ = new VariableScope("\n", ::DLDL::filetemplate::compilergeneratorTemplate::ScopeType::Variable_Field_Separator_, true);

			// Ctor
			VariableScopes() : VariableBase() {}

			VariableScopes(const char* text) : VariableBase(text) {}

			VariableScopes(const std::string& text) : VariableBase(text) {}

			VariableScopes(std::vector<VariableBase*> variables) : VariableBase(variables) {}

			// Dtor
			virtual ~VariableScopes() override = default;

			// Calls
			VariableBase* Default()
			{
				return default_;
			}
			VariableBase* Upper()
			{
				std::string upperVariant;
				std::string currentValue = GetValue();

				for (const auto character : currentValue)
				{
					upperVariant += std::toupper(character);
				}

				*upper_ = upperVariant;

				return upper_;
			}

			VariableBase* Lower()
			{
				std::string lowerVariant;
				std::string currentValue = GetValue();

				for (const auto character : currentValue)
				{
					lowerVariant += std::tolower(character);
				}

				*lower_ = lowerVariant;

				return lower_;
			}

			VariableBase* Variable_Field()
			{
				return variable_field_;
			}

			VariableBase* Variable_Field_Separator()
			{
				return variable_field_separator_;
			}

			void ExpandVariableField()
			{
				// currentvalue + separator
				const auto currentValue = GetValue() + Variable_Field_Separator()->GetValue();
				*Variable_Field() += currentValue;
			}
		};

	public:

		struct Variable_add_children_compilergenerators_ : public VariableScopes
		{

			static constexpr auto name = "add_children_compilergenerators_";



			Variable_add_children_compilergenerators_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::add_children_compilergenerators_;
			}

			virtual ~Variable_add_children_compilergenerators_() override = default;

			Variable_add_children_compilergenerators_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::add_children_compilergenerators_;

			}



			Variable_add_children_compilergenerators_& operator=(const Variable_add_children_compilergenerators_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_add_language_outputs_ : public VariableScopes
		{

			static constexpr auto name = "add_language_outputs_";



			Variable_add_language_outputs_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::add_language_outputs_;
			}

			virtual ~Variable_add_language_outputs_() override = default;

			Variable_add_language_outputs_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::add_language_outputs_;

			}



			Variable_add_language_outputs_& operator=(const Variable_add_language_outputs_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_child_ : public VariableScopes
		{

			static constexpr auto name = "child_";



			Variable_child_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::child_;
			}

			virtual ~Variable_child_() override = default;

			Variable_child_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::child_;

			}



			Variable_child_& operator=(const Variable_child_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_child_class_ : public VariableScopes
		{

			static constexpr auto name = "child_class_";



			Variable_child_class_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::child_class_;
			}

			virtual ~Variable_child_class_() override = default;

			Variable_child_class_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::child_class_;

			}



			Variable_child_class_& operator=(const Variable_child_class_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_children_compilergenerator_bases_ : public VariableScopes
		{

			static constexpr auto name = "children_compilergenerator_bases_";



			Variable_children_compilergenerator_bases_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::children_compilergenerator_bases_;
			}

			virtual ~Variable_children_compilergenerator_bases_() override = default;

			Variable_children_compilergenerator_bases_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::children_compilergenerator_bases_;

			}



			Variable_children_compilergenerator_bases_& operator=(const Variable_children_compilergenerator_bases_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_children_compilergenerator_bases_ctor_ : public VariableScopes
		{

			static constexpr auto name = "children_compilergenerator_bases_ctor_";



			Variable_children_compilergenerator_bases_ctor_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::children_compilergenerator_bases_ctor_;
			}

			virtual ~Variable_children_compilergenerator_bases_ctor_() override = default;

			Variable_children_compilergenerator_bases_ctor_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::children_compilergenerator_bases_ctor_;

			}



			Variable_children_compilergenerator_bases_ctor_& operator=(const Variable_children_compilergenerator_bases_ctor_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_children_compilergenerator_include_ : public VariableScopes
		{

			static constexpr auto name = "children_compilergenerator_include_";



			Variable_children_compilergenerator_include_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::children_compilergenerator_include_;
			}

			virtual ~Variable_children_compilergenerator_include_() override = default;

			Variable_children_compilergenerator_include_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::children_compilergenerator_include_;

			}



			Variable_children_compilergenerator_include_& operator=(const Variable_children_compilergenerator_include_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_file_ : public VariableScopes
		{

			static constexpr auto name = "file_";

			VariableBase* Content_ = GenerateVariable("");
			VariableBase* Class_postfix_ = GenerateVariable("");
			VariableBase* Extension_ = GenerateVariable("");
			VariableBase* File_name_ = GenerateVariable("");
			VariableBase* Namespace_ = GenerateVariable("");
			VariableBase* Target_language_ = GenerateVariable("");


			Variable_file_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::file_;
			}

			virtual ~Variable_file_() override = default;

			Variable_file_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::file_;
				*static_cast<VariableBase*>(Content_) = VariableBase(std::vector<VariableBase*>({ GenerateVariable("#ifndef "), GenerateVariable(compilergeneratortemplate_->header_guard_->This()), GenerateVariable("\n#define "), GenerateVariable(compilergeneratortemplate_->header_guard_->This()), GenerateVariable("\n#include \"Deamer/Compiler/Generator/Compiler"), GenerateVariable("."), GenerateVariable("h\"\n#include \""), GenerateVariable(compilergeneratortemplate_->language_full_name_slash_->This()), GenerateVariable("/Language"), GenerateVariable("."), GenerateVariable("h\"\n"), GenerateVariable(compilergeneratortemplate_->children_compilergenerator_include_->Variable_Field()), GenerateVariable("\n"), GenerateVariable(compilergeneratortemplate_->tool_includes_->Variable_Field()), GenerateVariable("\nnamespace "), GenerateVariable(compilergeneratortemplate_->language_full_name_->This()), GenerateVariable("\n"), GenerateVariable("{"), GenerateVariable("\n\t/*!\t"), GenerateVariable("\\"), GenerateVariable("class CompilerGenerator\n\t *\n\t *\t"), GenerateVariable("\\"), GenerateVariable("brief This contains the CompilerGenerator of the language "), GenerateVariable(compilergeneratortemplate_->language_full_name_->This()), GenerateVariable("\n\t *\n\t *\t"), GenerateVariable("\\"), GenerateVariable("details The CompilerGenerator class generates the compiler and various ecosystems"), GenerateVariable("."), GenerateVariable("\n\t *\n\t *\t"), GenerateVariable("\\"), GenerateVariable("note This is auto-generated via the DLDL definitions"), GenerateVariable("."), GenerateVariable("\n\t */\n\tclass CompilerGenerator : public ::deamer::compiler::generator::Compiler<::"), GenerateVariable(compilergeneratortemplate_->language_full_name_->This()), GenerateVariable("::Language>\n\t"), GenerateVariable(compilergeneratortemplate_->children_compilergenerator_bases_->Variable_Field()), GenerateVariable("\n\t"), GenerateVariable("{"), GenerateVariable("\n\tpublic:\n\t\tCompilerGenerator()\n\t\t\t: deamer::compiler::generator::Compiler<::"), GenerateVariable(compilergeneratortemplate_->language_full_name_->This()), GenerateVariable("::Language>()\n\t\t\t"), GenerateVariable(compilergeneratortemplate_->children_compilergenerator_bases_ctor_->Variable_Field()), GenerateVariable("\n\t\t"), GenerateVariable("{"), GenerateVariable("\n\t\t"), GenerateVariable("}"), GenerateVariable("\n\t\tdeamer::file::compiler::Output Generate() override\n\t\t"), GenerateVariable("{"), GenerateVariable("\n\t\t\t// Retrieve the Language Definition (LD)\n\t\t\t::deamer::file::compiler::Output output(::deamer::compiler::generator::Compiler<::"), GenerateVariable(compilergeneratortemplate_->language_full_name_->This()), GenerateVariable("::Language>::GetLanguageDefinition());\n\t\t\t"), GenerateVariable(compilergeneratortemplate_->add_children_compilergenerators_->Variable_Field()), GenerateVariable("\n\t\t\t// Initialize language outputs\n\t\t\t"), GenerateVariable(compilergeneratortemplate_->language_output_initialization_->Variable_Field()), GenerateVariable("\n\t\t\t// The language generation targets\n\t\t\t"), GenerateVariable(compilergeneratortemplate_->add_language_outputs_->Variable_Field()), GenerateVariable("\n\t\t\treturn output;\n\t\t"), GenerateVariable("}"), GenerateVariable("\n\t\t~CompilerGenerator() override = default;\n\t"), GenerateVariable("}"), GenerateVariable(";\n"), GenerateVariable("}"), GenerateVariable("\n#endif // "), GenerateVariable(compilergeneratortemplate_->header_guard_->This()), GenerateVariable("\n") }));
				Content_->type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::Scope;

				*static_cast<VariableBase*>(Class_postfix_) = VariableBase(std::vector<VariableBase*>({  }));
				Class_postfix_->type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::Scope;

				*static_cast<VariableBase*>(Extension_) = VariableBase(std::vector<VariableBase*>({  }));
				Extension_->type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::Scope;

				*static_cast<VariableBase*>(File_name_) = VariableBase(std::vector<VariableBase*>({  }));
				File_name_->type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::Scope;

				*static_cast<VariableBase*>(Namespace_) = VariableBase(std::vector<VariableBase*>({  }));
				Namespace_->type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::Scope;

				*static_cast<VariableBase*>(Target_language_) = VariableBase(std::vector<VariableBase*>({  }));
				Target_language_->type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::Scope;


			}


			VariableBase* Content() const
			{
				return Content_;
			}

			VariableBase* Class_postfix() const
			{
				return Class_postfix_;
			}

			VariableBase* Extension() const
			{
				return Extension_;
			}

			VariableBase* File_name() const
			{
				return File_name_;
			}

			VariableBase* Namespace() const
			{
				return Namespace_;
			}

			VariableBase* Target_language() const
			{
				return Target_language_;
			}


			Variable_file_& operator=(const Variable_file_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;

				*Content_ = *variable.Content_;
				*Class_postfix_ = *variable.Class_postfix_;
				*Extension_ = *variable.Extension_;
				*File_name_ = *variable.File_name_;
				*Namespace_ = *variable.Namespace_;
				*Target_language_ = *variable.Target_language_;


				return *this;
			}

		};

		struct Variable_header_guard_ : public VariableScopes
		{

			static constexpr auto name = "header_guard_";



			Variable_header_guard_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::header_guard_;
			}

			virtual ~Variable_header_guard_() override = default;

			Variable_header_guard_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::header_guard_;

			}



			Variable_header_guard_& operator=(const Variable_header_guard_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_language_full_name_ : public VariableScopes
		{

			static constexpr auto name = "language_full_name_";



			Variable_language_full_name_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::language_full_name_;
			}

			virtual ~Variable_language_full_name_() override = default;

			Variable_language_full_name_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::language_full_name_;

			}



			Variable_language_full_name_& operator=(const Variable_language_full_name_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_language_full_name_slash_ : public VariableScopes
		{

			static constexpr auto name = "language_full_name_slash_";



			Variable_language_full_name_slash_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::language_full_name_slash_;
			}

			virtual ~Variable_language_full_name_slash_() override = default;

			Variable_language_full_name_slash_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::language_full_name_slash_;

			}



			Variable_language_full_name_slash_& operator=(const Variable_language_full_name_slash_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_language_full_name_underscore_ : public VariableScopes
		{

			static constexpr auto name = "language_full_name_underscore_";



			Variable_language_full_name_underscore_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::language_full_name_underscore_;
			}

			virtual ~Variable_language_full_name_underscore_() override = default;

			Variable_language_full_name_underscore_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::language_full_name_underscore_;

			}



			Variable_language_full_name_underscore_& operator=(const Variable_language_full_name_underscore_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_language_output_initialization_ : public VariableScopes
		{

			static constexpr auto name = "language_output_initialization_";



			Variable_language_output_initialization_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::language_output_initialization_;
			}

			virtual ~Variable_language_output_initialization_() override = default;

			Variable_language_output_initialization_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::language_output_initialization_;

			}



			Variable_language_output_initialization_& operator=(const Variable_language_output_initialization_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_left_angle_bracket_ : public VariableScopes
		{

			static constexpr auto name = "left_angle_bracket_";



			Variable_left_angle_bracket_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::left_angle_bracket_;
			}

			virtual ~Variable_left_angle_bracket_() override = default;

			Variable_left_angle_bracket_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::left_angle_bracket_;

			}



			Variable_left_angle_bracket_& operator=(const Variable_left_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_left_bracket_ : public VariableScopes
		{

			static constexpr auto name = "left_bracket_";



			Variable_left_bracket_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::left_bracket_;
			}

			virtual ~Variable_left_bracket_() override = default;

			Variable_left_bracket_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::left_bracket_;

			}



			Variable_left_bracket_& operator=(const Variable_left_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_left_curly_bracket_ : public VariableScopes
		{

			static constexpr auto name = "left_curly_bracket_";



			Variable_left_curly_bracket_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::left_curly_bracket_;
			}

			virtual ~Variable_left_curly_bracket_() override = default;

			Variable_left_curly_bracket_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::left_curly_bracket_;

			}



			Variable_left_curly_bracket_& operator=(const Variable_left_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_right_angle_bracket_ : public VariableScopes
		{

			static constexpr auto name = "right_angle_bracket_";



			Variable_right_angle_bracket_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::right_angle_bracket_;
			}

			virtual ~Variable_right_angle_bracket_() override = default;

			Variable_right_angle_bracket_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::right_angle_bracket_;

			}



			Variable_right_angle_bracket_& operator=(const Variable_right_angle_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_right_bracket_ : public VariableScopes
		{

			static constexpr auto name = "right_bracket_";



			Variable_right_bracket_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::right_bracket_;
			}

			virtual ~Variable_right_bracket_() override = default;

			Variable_right_bracket_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::right_bracket_;

			}



			Variable_right_bracket_& operator=(const Variable_right_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_right_curly_bracket_ : public VariableScopes
		{

			static constexpr auto name = "right_curly_bracket_";



			Variable_right_curly_bracket_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::right_curly_bracket_;
			}

			virtual ~Variable_right_curly_bracket_() override = default;

			Variable_right_curly_bracket_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::right_curly_bracket_;

			}



			Variable_right_curly_bracket_& operator=(const Variable_right_curly_bracket_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_tool_ : public VariableScopes
		{

			static constexpr auto name = "tool_";



			Variable_tool_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::tool_;
			}

			virtual ~Variable_tool_() override = default;

			Variable_tool_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::tool_;

			}



			Variable_tool_& operator=(const Variable_tool_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_tool_include_path_ : public VariableScopes
		{

			static constexpr auto name = "tool_include_path_";



			Variable_tool_include_path_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::tool_include_path_;
			}

			virtual ~Variable_tool_include_path_() override = default;

			Variable_tool_include_path_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::tool_include_path_;

			}



			Variable_tool_include_path_& operator=(const Variable_tool_include_path_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_tool_includes_ : public VariableScopes
		{

			static constexpr auto name = "tool_includes_";



			Variable_tool_includes_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::tool_includes_;
			}

			virtual ~Variable_tool_includes_() override = default;

			Variable_tool_includes_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::tool_includes_;

			}



			Variable_tool_includes_& operator=(const Variable_tool_includes_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};

		struct Variable_tool_namespace_ : public VariableScopes
		{

			static constexpr auto name = "tool_namespace_";



			Variable_tool_namespace_() : VariableScopes()
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::tool_namespace_;
			}

			virtual ~Variable_tool_namespace_() override = default;

			Variable_tool_namespace_(compilergeneratorTemplate* compilergeneratortemplate_, const std::vector<VariableBase*>& variables) : VariableScopes(variables)
			{
				type = ::DLDL::filetemplate::compilergeneratorTemplate::Type::tool_namespace_;

			}



			Variable_tool_namespace_& operator=(const Variable_tool_namespace_& variable)
			{
				if (&variable == this)
				{
					return *this;
				}

				value = variable.value;
				isString = variable.isString;



				return *this;
			}

		};


	public:
		inline static std::vector<VariableBase*> variables_to_delete = std::vector<VariableBase*>();

	public:
		std::vector<VariableBase*> variables_;

	public:
		// Members that one can directly access.
		// e.g. compilergeneratorTemplate.member = "auto-generated";
		Variable_add_children_compilergenerators_* add_children_compilergenerators_ = new Variable_add_children_compilergenerators_();
		Variable_add_language_outputs_* add_language_outputs_ = new Variable_add_language_outputs_();
		Variable_child_* child_ = new Variable_child_();
		Variable_child_class_* child_class_ = new Variable_child_class_();
		Variable_children_compilergenerator_bases_* children_compilergenerator_bases_ = new Variable_children_compilergenerator_bases_();
		Variable_children_compilergenerator_bases_ctor_* children_compilergenerator_bases_ctor_ = new Variable_children_compilergenerator_bases_ctor_();
		Variable_children_compilergenerator_include_* children_compilergenerator_include_ = new Variable_children_compilergenerator_include_();
		Variable_file_* file_ = new Variable_file_();
		Variable_header_guard_* header_guard_ = new Variable_header_guard_();
		Variable_language_full_name_* language_full_name_ = new Variable_language_full_name_();
		Variable_language_full_name_slash_* language_full_name_slash_ = new Variable_language_full_name_slash_();
		Variable_language_full_name_underscore_* language_full_name_underscore_ = new Variable_language_full_name_underscore_();
		Variable_language_output_initialization_* language_output_initialization_ = new Variable_language_output_initialization_();
		Variable_left_angle_bracket_* left_angle_bracket_ = new Variable_left_angle_bracket_();
		Variable_left_bracket_* left_bracket_ = new Variable_left_bracket_();
		Variable_left_curly_bracket_* left_curly_bracket_ = new Variable_left_curly_bracket_();
		Variable_right_angle_bracket_* right_angle_bracket_ = new Variable_right_angle_bracket_();
		Variable_right_bracket_* right_bracket_ = new Variable_right_bracket_();
		Variable_right_curly_bracket_* right_curly_bracket_ = new Variable_right_curly_bracket_();
		Variable_tool_* tool_ = new Variable_tool_();
		Variable_tool_include_path_* tool_include_path_ = new Variable_tool_include_path_();
		Variable_tool_includes_* tool_includes_ = new Variable_tool_includes_();
		Variable_tool_namespace_* tool_namespace_ = new Variable_tool_namespace_();


	public:
		compilergeneratorTemplate()
		{
			*add_children_compilergenerators_ = Variable_add_children_compilergenerators_(this, std::vector<VariableBase*>({ GenerateVariable("output"), GenerateVariable("."), GenerateVariable("AddCompilerOutput("), GenerateVariable(child_class_->This()), GenerateVariable("::CompilerGenerator::Generate());") }));
			*add_language_outputs_ = Variable_add_language_outputs_(this, std::vector<VariableBase*>({ GenerateVariable("output"), GenerateVariable("."), GenerateVariable("AddLanguageToolOutput("), GenerateVariable(tool_->This()), GenerateVariable("."), GenerateVariable("Generate());") }));
			*child_ = Variable_child_(this, std::vector<VariableBase*>({  }));
			*child_class_ = Variable_child_class_(this, std::vector<VariableBase*>({ GenerateVariable("::"), GenerateVariable(language_full_name_->This()), GenerateVariable("::"), GenerateVariable(child_->This()) }));
			*children_compilergenerator_bases_ = Variable_children_compilergenerator_bases_(this, std::vector<VariableBase*>({ GenerateVariable(", public "), GenerateVariable(child_class_->This()), GenerateVariable("::CompilerGenerator") }));
			*children_compilergenerator_bases_ctor_ = Variable_children_compilergenerator_bases_ctor_(this, std::vector<VariableBase*>({ GenerateVariable(", "), GenerateVariable(child_class_->This()), GenerateVariable("::CompilerGenerator()") }));
			*children_compilergenerator_include_ = Variable_children_compilergenerator_include_(this, std::vector<VariableBase*>({ GenerateVariable("#include \""), GenerateVariable(language_full_name_slash_->This()), GenerateVariable("/"), GenerateVariable(child_->This()), GenerateVariable("//CompilerGenerator"), GenerateVariable("."), GenerateVariable("h\"") }));
			*file_ = Variable_file_(this, std::vector<VariableBase*>({  }));
			*header_guard_ = Variable_header_guard_(this, std::vector<VariableBase*>({ GenerateVariable(language_full_name_underscore_->Upper()), GenerateVariable("_COMPILERGENERATOR_H") }));
			*language_full_name_ = Variable_language_full_name_(this, std::vector<VariableBase*>({  }));
			*language_full_name_slash_ = Variable_language_full_name_slash_(this, std::vector<VariableBase*>({  }));
			*language_full_name_underscore_ = Variable_language_full_name_underscore_(this, std::vector<VariableBase*>({  }));
			*language_output_initialization_ = Variable_language_output_initialization_(this, std::vector<VariableBase*>({ GenerateVariable(tool_namespace_->This()), GenerateVariable("::"), GenerateVariable(tool_->Lower()), GenerateVariable("::"), GenerateVariable(tool_->This()), GenerateVariable(" "), GenerateVariable(tool_->This()), GenerateVariable("(::deamer::compiler::generator::Compiler"), GenerateVariable(left_angle_bracket_->This()), GenerateVariable("::"), GenerateVariable(language_full_name_->This()), GenerateVariable("::Language"), GenerateVariable(right_angle_bracket_->This()), GenerateVariable("::GetLanguageDefinition());") }));
			*left_angle_bracket_ = Variable_left_angle_bracket_(this, std::vector<VariableBase*>({ GenerateVariable("<") }));
			*left_bracket_ = Variable_left_bracket_(this, std::vector<VariableBase*>({ GenerateVariable("{") }));
			*left_curly_bracket_ = Variable_left_curly_bracket_(this, std::vector<VariableBase*>({ GenerateVariable("(") }));
			*right_angle_bracket_ = Variable_right_angle_bracket_(this, std::vector<VariableBase*>({ GenerateVariable(">") }));
			*right_bracket_ = Variable_right_bracket_(this, std::vector<VariableBase*>({ GenerateVariable("}") }));
			*right_curly_bracket_ = Variable_right_curly_bracket_(this, std::vector<VariableBase*>({ GenerateVariable(")") }));
			*tool_ = Variable_tool_(this, std::vector<VariableBase*>({  }));
			*tool_include_path_ = Variable_tool_include_path_(this, std::vector<VariableBase*>({  }));
			*tool_includes_ = Variable_tool_includes_(this, std::vector<VariableBase*>({ GenerateVariable("#include \""), GenerateVariable(tool_include_path_->This()), GenerateVariable("\"") }));
			*tool_namespace_ = Variable_tool_namespace_(this, std::vector<VariableBase*>({  }));


			variables_.emplace_back(add_children_compilergenerators_);
			variables_.emplace_back(add_language_outputs_);
			variables_.emplace_back(child_);
			variables_.emplace_back(child_class_);
			variables_.emplace_back(children_compilergenerator_bases_);
			variables_.emplace_back(children_compilergenerator_bases_ctor_);
			variables_.emplace_back(children_compilergenerator_include_);
			variables_.emplace_back(file_);
			variables_.emplace_back(header_guard_);
			variables_.emplace_back(language_full_name_);
			variables_.emplace_back(language_full_name_slash_);
			variables_.emplace_back(language_full_name_underscore_);
			variables_.emplace_back(language_output_initialization_);
			variables_.emplace_back(left_angle_bracket_);
			variables_.emplace_back(left_bracket_);
			variables_.emplace_back(left_curly_bracket_);
			variables_.emplace_back(right_angle_bracket_);
			variables_.emplace_back(right_bracket_);
			variables_.emplace_back(right_curly_bracket_);
			variables_.emplace_back(tool_);
			variables_.emplace_back(tool_include_path_);
			variables_.emplace_back(tool_includes_);
			variables_.emplace_back(tool_namespace_);

		}

		virtual ~compilergeneratorTemplate()
		{
			for (auto* variable : variables_to_delete)
			{
				delete variable;
			}

			variables_to_delete.clear();
		}

	public:
		// Default DST functions

		/*!	\fn GetOutput
		 *
		 *	\brief returns the output with the given the current state.
		 */
		std::string GetOutput()
		{
			return file_->Content()->GetValue();
		}

		/*!	\fn GetVariables
		 *
		 *	\brief Returns all top level variables known in this template.
		 */
		std::vector<VariableBase*> GetVariables()
		{
			return variables_;
		}

	public:
		void Reset(VariableScopes* scope)
		{
			scope->Upper();
			scope->Lower();
		}
	};
}

#endif // DST_COMPILERGENERATORTEMPLATE_h
